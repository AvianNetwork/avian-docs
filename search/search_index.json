{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Welcome"},{"location":"ans/","text":"Avian Name System Note This document is based on Avian Improvement Proposals #4 Warning Avian Name System is rapidly changing in development and any info stated to subject to change. AIP: 4 Title: Avian Name System (ANS) Author: Shafil Alam <alamshafil@pm.me> Comments-Summary: No comments yet. Comments-URI: https://github.com/AvianNetwork/aips Status: Draft Type: Standards Created: 2022-08-29 Abstract Create a system that allows assets to be mapped to an Avian address or IP address for DNS purposes. Motivation Currently, assets can store an IPFS hash or a TXID hash as metadata. This limit to the on-chain metadata length is 64 characters, meaning we can store any arbitrary data that is less than 64 characters. Using this fact, we can store metadata in a standardized manner that maps to an Avian address or IP address for DNS purposes. This increases the possible use-cases of assets and increases demand for them. People will be able to sell assets like domain names or sell them for custom names to link their address to. However, abuses and everything else must be considered and researched. Specification The ANS system requires multiple specifications to work efficiently. ANS IDs In order to efficiently store data within the 64 character limit, a standardized system will be in place to express addresses, IPs, etc. in the shortest manner possible. (Prefix) An ANS ID will be less than or equal to 64 characters and will start with unique character to distinguish it from IPFS hash or TXID. It is proposed to start an ANS ID with \"ANS\". It is recommended that this prefix is less than 3 characters to allow more data to be stored within the 64 character limit. (Type) An single hex value from 0-F will determine the type of ANS ID. This will make it easy to quickly get the type of data stored in the ANS ID. 0 = Avian address 1 = IP address (DNS A record) (Raw data) After the type, the data raw will come next. This can a Base58 address or a hex-encoded IP address. Examples: Address = RXBurnXXXXXXXXXXXXXXXXXXXXXXWUo9FV IP = 7f000001 (127.0.0.1) Using the IP address in hex format is compact and efficient. IPv4 address can go up to 255 in decimal, which is 0xFF in hex. Since IPv4 address have four octets, only 8 (4*2) characters are needed (ff-ff-ff-ff). Base58 address can have 26 to 36 characters which will fit in our 64 character limit. 3 char (prefix) + 1 char (type hex) + 36 char (address) = 40 characters which is <= 64 characters limit. Examples ANS0RXBurnXXXXXXXXXXXXXXXXXXXXXXWUo9FV (addr) ANS17f000001 (ip) Extra metadata When creating an asset, the user has the option to add both an IPFS hash or ANS data together. The IPFS hash can link to extra metadata related to the ANS data, such as an address for another cryptocurrency, social media handle, etc. The IPFS data can be a JSON file with a special identifier, although this identifier will not be standardized by this AIP. It is recommended to use something like \"hasANS\" or \"isANS\" for external services to easily find extra ANS metadata. RPC It it proposed to create helper RPC methods for encoding and decoding ANS IDs. ansdecode This RPC method will decode an ANS ID given the ID passed as a string. ansencode This RPC method will encode and generate an ANS ID given the ANS type and raw data as a string. The rawData will be checked based on the given type. The RPC method should convert the type string into a proper type hex as defined above. getansdata This RPC method will return ANS data (if it exists) based on the given asset name. Furthermore, the \"getassetdata\" RPC method will be updated to include infomation about ANS. If an asset contains ANS data attached then the RPC method should be state the asset has ANS data (hasANS) and give the raw ANS ID (ans_id). Using the ANS ID the RPC method should also append ANS info based on the type. For example: if an asset contains ANS data that links to an Avian address, then the RPC method should return this info for use by external programs. QT UI The QT UI should be updated to allow the user to attach ANS data when creating or reissuing an asset. There will be a drop-down box allowing the user to choose the ANS type (ex: addeess, IP) and a input box to input ANS data based on the selected type. The input box will be type-checked with strict requirements. When reissuing an asset, the UI should allow the user to change ANS data. Backwards Compatibility This AIP is a consensus change since it will change the asset database and render all current asset data incompatibile. This will cause all blocks with asset data to become invalid and lead to consensus split and a possible rollback. However, this will not affect the Avian mainnet since assets are not active (as of writing) and should not cause any hardfork/rollback once assets do go live. Update Avian 4.1.0 was successfully performed without issues regrading ANS (disabled in mainnet) Electrum wallet It can be optional to implement into the Electrum wallet (given that these changes do not affect the current wallet). Diagram Copyright/public domain This document is hereby placed in the public domain.","title":"Avian Name System"},{"location":"ans/#avian-name-system","text":"Note This document is based on Avian Improvement Proposals #4 Warning Avian Name System is rapidly changing in development and any info stated to subject to change. AIP: 4 Title: Avian Name System (ANS) Author: Shafil Alam <alamshafil@pm.me> Comments-Summary: No comments yet. Comments-URI: https://github.com/AvianNetwork/aips Status: Draft Type: Standards Created: 2022-08-29","title":"Avian Name System"},{"location":"ans/#abstract","text":"Create a system that allows assets to be mapped to an Avian address or IP address for DNS purposes.","title":"Abstract"},{"location":"ans/#motivation","text":"Currently, assets can store an IPFS hash or a TXID hash as metadata. This limit to the on-chain metadata length is 64 characters, meaning we can store any arbitrary data that is less than 64 characters. Using this fact, we can store metadata in a standardized manner that maps to an Avian address or IP address for DNS purposes. This increases the possible use-cases of assets and increases demand for them. People will be able to sell assets like domain names or sell them for custom names to link their address to. However, abuses and everything else must be considered and researched.","title":"Motivation"},{"location":"ans/#specification","text":"The ANS system requires multiple specifications to work efficiently.","title":"Specification"},{"location":"ans/#ans-ids","text":"In order to efficiently store data within the 64 character limit, a standardized system will be in place to express addresses, IPs, etc. in the shortest manner possible. (Prefix) An ANS ID will be less than or equal to 64 characters and will start with unique character to distinguish it from IPFS hash or TXID. It is proposed to start an ANS ID with \"ANS\". It is recommended that this prefix is less than 3 characters to allow more data to be stored within the 64 character limit. (Type) An single hex value from 0-F will determine the type of ANS ID. This will make it easy to quickly get the type of data stored in the ANS ID. 0 = Avian address 1 = IP address (DNS A record) (Raw data) After the type, the data raw will come next. This can a Base58 address or a hex-encoded IP address. Examples: Address = RXBurnXXXXXXXXXXXXXXXXXXXXXXWUo9FV IP = 7f000001 (127.0.0.1) Using the IP address in hex format is compact and efficient. IPv4 address can go up to 255 in decimal, which is 0xFF in hex. Since IPv4 address have four octets, only 8 (4*2) characters are needed (ff-ff-ff-ff). Base58 address can have 26 to 36 characters which will fit in our 64 character limit. 3 char (prefix) + 1 char (type hex) + 36 char (address) = 40 characters which is <= 64 characters limit. Examples ANS0RXBurnXXXXXXXXXXXXXXXXXXXXXXWUo9FV (addr) ANS17f000001 (ip)","title":"ANS IDs"},{"location":"ans/#extra-metadata","text":"When creating an asset, the user has the option to add both an IPFS hash or ANS data together. The IPFS hash can link to extra metadata related to the ANS data, such as an address for another cryptocurrency, social media handle, etc. The IPFS data can be a JSON file with a special identifier, although this identifier will not be standardized by this AIP. It is recommended to use something like \"hasANS\" or \"isANS\" for external services to easily find extra ANS metadata.","title":"Extra metadata"},{"location":"ans/#rpc","text":"It it proposed to create helper RPC methods for encoding and decoding ANS IDs.","title":"RPC"},{"location":"ans/#ansdecode","text":"This RPC method will decode an ANS ID given the ID passed as a string.","title":"ansdecode"},{"location":"ans/#ansencode","text":"This RPC method will encode and generate an ANS ID given the ANS type and raw data as a string. The rawData will be checked based on the given type. The RPC method should convert the type string into a proper type hex as defined above.","title":"ansencode"},{"location":"ans/#getansdata","text":"This RPC method will return ANS data (if it exists) based on the given asset name. Furthermore, the \"getassetdata\" RPC method will be updated to include infomation about ANS. If an asset contains ANS data attached then the RPC method should be state the asset has ANS data (hasANS) and give the raw ANS ID (ans_id). Using the ANS ID the RPC method should also append ANS info based on the type. For example: if an asset contains ANS data that links to an Avian address, then the RPC method should return this info for use by external programs.","title":"getansdata"},{"location":"ans/#qt-ui","text":"The QT UI should be updated to allow the user to attach ANS data when creating or reissuing an asset. There will be a drop-down box allowing the user to choose the ANS type (ex: addeess, IP) and a input box to input ANS data based on the selected type. The input box will be type-checked with strict requirements. When reissuing an asset, the UI should allow the user to change ANS data.","title":"QT UI"},{"location":"ans/#backwards-compatibility","text":"This AIP is a consensus change since it will change the asset database and render all current asset data incompatibile. This will cause all blocks with asset data to become invalid and lead to consensus split and a possible rollback. However, this will not affect the Avian mainnet since assets are not active (as of writing) and should not cause any hardfork/rollback once assets do go live. Update Avian 4.1.0 was successfully performed without issues regrading ANS (disabled in mainnet)","title":"Backwards Compatibility"},{"location":"ans/#electrum-wallet","text":"It can be optional to implement into the Electrum wallet (given that these changes do not affect the current wallet).","title":"Electrum wallet"},{"location":"ans/#diagram","text":"","title":"Diagram"},{"location":"ans/#copyrightpublic-domain","text":"This document is hereby placed in the public domain.","title":"Copyright/public domain"},{"location":"flightplans/","text":"Introdution Warning Avian Flight Plans is still a heavy work-in-progress and any info stated is subject to change. Flight plans are not available for use on mainnet, only on testnet. What are Avian Flight Plans? Note Avian Flight Plans can compared as smart contracts but are NOT the same thing. Avian Flight Plans is a scripting frontend for RPC methods. Users of the Avian Network can create assets and decide their purpose and rules independent of the protocol. To further leverage and automate the use of assets, flight plans can be used to assist in this task. Flight plans allow the users to design their own protocol according to their needs, allowing further control over assets. Assets themselves alone can be transferred, minted, etc. We want to further unlock the capabilities of assets by developing a smart contract system to allow developers to have greater control and automation over assets. Although RPC commands exist for token management, a scripting language will allow more control and help with readability as opposed to using multiple RPC methods. Basic example Flight plan code (test.lua) Note Avian Flight Plans are written in the Lua programming language. To learn more about the avian object, refer to Avian Lib \u2197 -- Function to get random block function rnd_hash () height = math.random ( 1 , 3000 ) return avian . blockchain . getblockhash ( height ) end -- Print time of random block function info_hash () block = json . decode ( avian . blockchain . getblock ( rnd_hash ())) time = os.date ( \"%x\" , block . time ) return \"Result: \" .. time end Calling function using RPC RPC Since Avian Flight Plans can called using the RPC, this allows flight plans to be called from any programming language that supports Bitcoin RPC. We will use avian-cli for this example. avian-cli call_flightplan test info_hash Output Result: 01/15/2022 Links Examples \u2197 Getting Started \u2197 Inner workings \u2197 Avian Lib \u2197","title":"Introdution to Avian Flight Plans"},{"location":"flightplans/#introdution","text":"Warning Avian Flight Plans is still a heavy work-in-progress and any info stated is subject to change. Flight plans are not available for use on mainnet, only on testnet.","title":"Introdution"},{"location":"flightplans/#what-are-avian-flight-plans","text":"Note Avian Flight Plans can compared as smart contracts but are NOT the same thing. Avian Flight Plans is a scripting frontend for RPC methods. Users of the Avian Network can create assets and decide their purpose and rules independent of the protocol. To further leverage and automate the use of assets, flight plans can be used to assist in this task. Flight plans allow the users to design their own protocol according to their needs, allowing further control over assets. Assets themselves alone can be transferred, minted, etc. We want to further unlock the capabilities of assets by developing a smart contract system to allow developers to have greater control and automation over assets. Although RPC commands exist for token management, a scripting language will allow more control and help with readability as opposed to using multiple RPC methods.","title":"What are Avian Flight Plans?"},{"location":"flightplans/#basic-example","text":"","title":"Basic example"},{"location":"flightplans/#flight-plan-code-testlua","text":"Note Avian Flight Plans are written in the Lua programming language. To learn more about the avian object, refer to Avian Lib \u2197 -- Function to get random block function rnd_hash () height = math.random ( 1 , 3000 ) return avian . blockchain . getblockhash ( height ) end -- Print time of random block function info_hash () block = json . decode ( avian . blockchain . getblock ( rnd_hash ())) time = os.date ( \"%x\" , block . time ) return \"Result: \" .. time end","title":"Flight plan code (test.lua)"},{"location":"flightplans/#calling-function-using-rpc","text":"RPC Since Avian Flight Plans can called using the RPC, this allows flight plans to be called from any programming language that supports Bitcoin RPC. We will use avian-cli for this example. avian-cli call_flightplan test info_hash","title":"Calling function using RPC"},{"location":"flightplans/#output","text":"Result: 01/15/2022","title":"Output"},{"location":"flightplans/#links","text":"","title":"Links"},{"location":"flightplans/#examples","text":"","title":"Examples \u2197"},{"location":"flightplans/#getting-started","text":"","title":"Getting Started \u2197"},{"location":"flightplans/#inner-workings","text":"","title":"Inner workings \u2197"},{"location":"flightplans/#avian-lib","text":"","title":"Avian Lib \u2197"},{"location":"flightplans/examples/","text":"Examples Example 1: Real life usecase Note The following example is purely fictitious and does not showcase the final product. The sole purpose of this example is to provide a basic workflow on how smart contracts can be used. Let\u2019s suppose a simple example. A social media website wants to keep track of a like counter and wants to use the Avian blockchain to keep track of a decentralized matter. This would be their workflow: Install the Avian wallet Write code Deploy code to Avian blockchain Hook website to call flight plan function Let\u2019s write the smart contract How to call the functions? Use this RPC method: call_flightplan [flight plan name] [function name] [args] Figure 1 - An example of calling an Avian flight plan via the RPC How would you show the likes on the website? Since a new RPC call will allow users to call flight plan functions, any RPC library should work. This means almost any programming language that supports HTTP calls can use Avian smart contracts. Figure 2 will show a simple example in React which is a popular frontend framework. Figure 2 - Example React code using RPC to interact with a flight plan to display the like count. Example 2: Creating a DNS system Note This example is theoretical and only serves to show how flight plans can be coded. Let\u2019s create a DNS system using Avian flight plans! Our current DNS is used to convert domain names such as \u201cavn.network\u201d to their correct IP address. Unfortunately, DNS is centralized, so let\u2019s take the opportunity to use assets and smart contracts to create a basic DNS system in Avian. Figure 5 shows the code to implement our decentralized DNS flight plan. Example 3: Linking to Python Example 4: Linking to Web using SvelteKit Server side rendering using Svelte Kit and NodeJS","title":"Examples"},{"location":"flightplans/examples/#examples","text":"","title":"Examples"},{"location":"flightplans/examples/#example-1-real-life-usecase","text":"Note The following example is purely fictitious and does not showcase the final product. The sole purpose of this example is to provide a basic workflow on how smart contracts can be used. Let\u2019s suppose a simple example. A social media website wants to keep track of a like counter and wants to use the Avian blockchain to keep track of a decentralized matter.","title":"Example 1: Real life usecase"},{"location":"flightplans/examples/#this-would-be-their-workflow","text":"Install the Avian wallet Write code Deploy code to Avian blockchain Hook website to call flight plan function","title":"This would be their workflow:"},{"location":"flightplans/examples/#lets-write-the-smart-contract","text":"","title":"Let\u2019s write the smart contract"},{"location":"flightplans/examples/#how-to-call-the-functions","text":"Use this RPC method: call_flightplan [flight plan name] [function name] [args] Figure 1 - An example of calling an Avian flight plan via the RPC","title":"How to call the functions?"},{"location":"flightplans/examples/#how-would-you-show-the-likes-on-the-website","text":"Since a new RPC call will allow users to call flight plan functions, any RPC library should work. This means almost any programming language that supports HTTP calls can use Avian smart contracts. Figure 2 will show a simple example in React which is a popular frontend framework. Figure 2 - Example React code using RPC to interact with a flight plan to display the like count.","title":"How would you show the likes on the website?"},{"location":"flightplans/examples/#example-2-creating-a-dns-system","text":"Note This example is theoretical and only serves to show how flight plans can be coded. Let\u2019s create a DNS system using Avian flight plans! Our current DNS is used to convert domain names such as \u201cavn.network\u201d to their correct IP address. Unfortunately, DNS is centralized, so let\u2019s take the opportunity to use assets and smart contracts to create a basic DNS system in Avian. Figure 5 shows the code to implement our decentralized DNS flight plan.","title":"Example 2: Creating a DNS system"},{"location":"flightplans/examples/#example-3-linking-to-python","text":"","title":"Example 3: Linking to Python"},{"location":"flightplans/examples/#example-4-linking-to-web-using-sveltekit","text":"Server side rendering using Svelte Kit and NodeJS","title":"Example 4: Linking to Web using SvelteKit"},{"location":"flightplans/getting-started/","text":"Getting Started GUI Method First time install Note v4.0 or above is required to run flight plans. Install the latest Avian wallet here: Latest Avian wallet \u2197 Extract the ZIP Enable Flightplans Windows You can either create a shortcut or run it from Command Prompt. Create shortcut Command Prompt Go to the folder that contains avian-qt.exe Right Button on avian-qt.exe Click on Create shortcut Go to newly added shortcut location Right Button on shortcut Click on Properties Find Execute and click on it Add -flightplans to the end of the input box. Go to the folder that contains avian-qt.exe Shift + Right Button Click on Open in Command Prompt Type: avian-qt.exe -flightplans Avian wallet should open. Linux or macOS You can run Avian from the terminal to enable flight plans. Run from terminal Using cd go to the folder that contains avian-qt Type: chmod +x avian-qt ./avian-qt -flightplans Creating the \"flightplans\" folder If you used a custom datadir, then go to it. If you used the default datadir, then it should be in the folder stated below: Windows C:\\Users\\<Username>\\AppData\\Roaming\\Avian macOS ~/Library/Application Support/Avian Unix ~/.avian Once you have opened this folder, create a new folder called flightplans in it. Go inside this folder, and create a new file with any name you want. Make sure it ends in .lua For this example, let's make a new file called test.lua Write flightplan code in new file Refer to other pages to learn how to write flightplan code. For this example, we will make code that returns Hello, World! Code is shown below: function hello_world () return \"Hello, World!\" end Run flightplan from wallet First, open your wallet with flightplans enabled (shortcut or via terminal) Go to Help -> Debug -> Console To run the function hello_world in the file called test.lua , type the following command: call_flightplan test hello_world The format of the RPC call is below: call_flightplan <file name> <function name> <args> Links Examples \u2197 Inner workings \u2197 Avian Lib \u2197 Web3 Lib \u2197","title":"Getting Started"},{"location":"flightplans/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"flightplans/getting-started/#gui-method","text":"","title":"GUI Method"},{"location":"flightplans/getting-started/#first-time-install","text":"Note v4.0 or above is required to run flight plans. Install the latest Avian wallet here: Latest Avian wallet \u2197 Extract the ZIP","title":"First time install"},{"location":"flightplans/getting-started/#enable-flightplans","text":"","title":"Enable Flightplans"},{"location":"flightplans/getting-started/#windows","text":"You can either create a shortcut or run it from Command Prompt. Create shortcut Command Prompt Go to the folder that contains avian-qt.exe Right Button on avian-qt.exe Click on Create shortcut Go to newly added shortcut location Right Button on shortcut Click on Properties Find Execute and click on it Add -flightplans to the end of the input box. Go to the folder that contains avian-qt.exe Shift + Right Button Click on Open in Command Prompt Type: avian-qt.exe -flightplans Avian wallet should open.","title":"Windows"},{"location":"flightplans/getting-started/#linux-or-macos","text":"You can run Avian from the terminal to enable flight plans. Run from terminal Using cd go to the folder that contains avian-qt Type: chmod +x avian-qt ./avian-qt -flightplans","title":"Linux or macOS"},{"location":"flightplans/getting-started/#creating-the-flightplans-folder","text":"If you used a custom datadir, then go to it. If you used the default datadir, then it should be in the folder stated below:","title":"Creating the \"flightplans\" folder"},{"location":"flightplans/getting-started/#windows_1","text":"C:\\Users\\<Username>\\AppData\\Roaming\\Avian","title":"Windows"},{"location":"flightplans/getting-started/#macos","text":"~/Library/Application Support/Avian","title":"macOS"},{"location":"flightplans/getting-started/#unix","text":"~/.avian Once you have opened this folder, create a new folder called flightplans in it. Go inside this folder, and create a new file with any name you want. Make sure it ends in .lua For this example, let's make a new file called test.lua","title":"Unix"},{"location":"flightplans/getting-started/#write-flightplan-code-in-new-file","text":"Refer to other pages to learn how to write flightplan code. For this example, we will make code that returns Hello, World! Code is shown below: function hello_world () return \"Hello, World!\" end","title":"Write flightplan code in new file"},{"location":"flightplans/getting-started/#run-flightplan-from-wallet","text":"First, open your wallet with flightplans enabled (shortcut or via terminal) Go to Help -> Debug -> Console To run the function hello_world in the file called test.lua , type the following command: call_flightplan test hello_world The format of the RPC call is below: call_flightplan <file name> <function name> <args>","title":"Run flightplan from wallet"},{"location":"flightplans/getting-started/#links","text":"","title":"Links"},{"location":"flightplans/getting-started/#examples","text":"","title":"Examples \u2197"},{"location":"flightplans/getting-started/#inner-workings","text":"","title":"Inner workings \u2197"},{"location":"flightplans/getting-started/#avian-lib","text":"","title":"Avian Lib \u2197"},{"location":"flightplans/getting-started/#web3-lib","text":"","title":"Web3 Lib \u2197"},{"location":"flightplans/inner-workings/","text":"Inner workings Infographic How was this created? We used Lua, a scripting language, because it allowed us to embed it in C++ which means we can easily connect our RPC and other functions to it easily. Refer to Figure 6 to see how this can be implemented in a UTXO model, and Figure 7 for a local model. UTXO Model Figure 5 - Infographic explaining deploying contracts and executing them. Local Model Figure 6 shows the data-dir folder containing a new folder called \u201cflight plans\u201d to store the contracts.","title":"Inner workings"},{"location":"flightplans/inner-workings/#inner-workings","text":"","title":"Inner workings"},{"location":"flightplans/inner-workings/#infographic","text":"","title":"Infographic"},{"location":"flightplans/inner-workings/#how-was-this-created","text":"We used Lua, a scripting language, because it allowed us to embed it in C++ which means we can easily connect our RPC and other functions to it easily. Refer to Figure 6 to see how this can be implemented in a UTXO model, and Figure 7 for a local model.","title":"How was this created?"},{"location":"flightplans/inner-workings/#utxo-model","text":"Figure 5 - Infographic explaining deploying contracts and executing them.","title":"UTXO Model"},{"location":"flightplans/inner-workings/#local-model","text":"Figure 6 shows the data-dir folder containing a new folder called \u201cflight plans\u201d to store the contracts.","title":"Local Model"},{"location":"flightplans/avian-library/","text":"Info Avian Flight Plans contains the default Avian Library for full access to the blockchain and local wallet. The library is contained in the avian object. And sections, like \"assets\" would look like this: avian.assets List of sections avian.addressIndex \u2197 avian.assets \u2197 avian.blockchain \u2197 avian.localWallet \u2197 avian.main \u2197 avian.messages \u2197 avian.mining \u2197 avian.network \u2197 avian.rawTransactions \u2197","title":"Info"},{"location":"flightplans/avian-library/#info","text":"Avian Flight Plans contains the default Avian Library for full access to the blockchain and local wallet. The library is contained in the avian object. And sections, like \"assets\" would look like this: avian.assets","title":"Info"},{"location":"flightplans/avian-library/#list-of-sections","text":"avian.addressIndex \u2197 avian.assets \u2197 avian.blockchain \u2197 avian.localWallet \u2197 avian.main \u2197 avian.messages \u2197 avian.mining \u2197 avian.network \u2197 avian.rawTransactions \u2197","title":"List of sections"},{"location":"flightplans/avian-library/address-index/getaddressbalance/","text":"getaddressbalance Returns the balance for an address(es) (requires addressindex to be enabled). Arguments: { \"addresses:\" [ \"address\" (string) The base58check encoded address ,... ] }, \"includeAssets\" (boolean, optional, default false) If true this will return an expanded result which includes asset balances Result: { \"balance\" (string) The current balance in satoshis \"received\" (string) The total number of satoshis received (including change) } OR [ { \"assetName\" (string) The asset associated with the balance (AVN for Aviancoin) \"balance\" (string) The current balance in satoshis \"received\" (string) The total number of satoshis received (including change) },... ] Examples: avian-cli getaddressbalance '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"]}'","title":"getaddressbalance"},{"location":"flightplans/avian-library/address-index/getaddressbalance/#getaddressbalance","text":"Returns the balance for an address(es) (requires addressindex to be enabled).","title":"getaddressbalance"},{"location":"flightplans/avian-library/address-index/getaddressbalance/#arguments","text":"{ \"addresses:\" [ \"address\" (string) The base58check encoded address ,... ] }, \"includeAssets\" (boolean, optional, default false) If true this will return an expanded result which includes asset balances","title":"Arguments:"},{"location":"flightplans/avian-library/address-index/getaddressbalance/#result","text":"{ \"balance\" (string) The current balance in satoshis \"received\" (string) The total number of satoshis received (including change) } OR [ { \"assetName\" (string) The asset associated with the balance (AVN for Aviancoin) \"balance\" (string) The current balance in satoshis \"received\" (string) The total number of satoshis received (including change) },... ]","title":"Result:"},{"location":"flightplans/avian-library/address-index/getaddressbalance/#examples","text":"avian-cli getaddressbalance '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"]}'","title":"Examples:"},{"location":"flightplans/avian-library/address-index/getaddressdeltas/","text":"getaddressdeltas Returns all changes for an address (requires addressindex to be enabled). Arguments: { \"addresses\" [ \"address\" (string) The base58check encoded address ,... ] \"start\" (number) The start block height \"end\" (number) The end block height \"chainInfo\" (boolean) Include chain info in results, only applies if start and end specified \"assetName\" (string, optional) Get deltas for a particular asset instead of AVN. } Result: [ { \"assetName\" (string) The asset associated with the deltas (AVN for Aviancoin) \"satoshis\" (number) The difference of satoshis \"txid\" (string) The related txid \"index\" (number) The related input or output index \"height\" (number) The block height \"address\" (string) The base58check encoded address } ] Examples: avian-cli getaddressdeltas '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"]}' avian-cli getaddressdeltas '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"],\"assetName\":\"MY_ASSET\"}'","title":"getaddressdeltas"},{"location":"flightplans/avian-library/address-index/getaddressdeltas/#getaddressdeltas","text":"Returns all changes for an address (requires addressindex to be enabled).","title":"getaddressdeltas"},{"location":"flightplans/avian-library/address-index/getaddressdeltas/#arguments","text":"{ \"addresses\" [ \"address\" (string) The base58check encoded address ,... ] \"start\" (number) The start block height \"end\" (number) The end block height \"chainInfo\" (boolean) Include chain info in results, only applies if start and end specified \"assetName\" (string, optional) Get deltas for a particular asset instead of AVN. }","title":"Arguments:"},{"location":"flightplans/avian-library/address-index/getaddressdeltas/#result","text":"[ { \"assetName\" (string) The asset associated with the deltas (AVN for Aviancoin) \"satoshis\" (number) The difference of satoshis \"txid\" (string) The related txid \"index\" (number) The related input or output index \"height\" (number) The block height \"address\" (string) The base58check encoded address } ]","title":"Result:"},{"location":"flightplans/avian-library/address-index/getaddressdeltas/#examples","text":"avian-cli getaddressdeltas '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"]}' avian-cli getaddressdeltas '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"],\"assetName\":\"MY_ASSET\"}'","title":"Examples:"},{"location":"flightplans/avian-library/address-index/getaddressmempool/","text":"getaddressmempool Returns all mempool deltas for an address (requires addressindex to be enabled). Arguments: { \"addresses\" [ \"address\" (string) The base58check encoded address ,... ] }, \"includeAssets\" (boolean, optional, default false) If true this will return an expanded result which includes asset deltas Result: [ { \"address\" (string) The base58check encoded address \"assetName\" (string) The name of the associated asset (AVN for Aviancoin) \"txid\" (string) The related txid \"index\" (number) The related input or output index \"satoshis\" (number) The difference of satoshis \"timestamp\" (number) The time the transaction entered the mempool (seconds) \"prevtxid\" (string) The previous txid (if spending) \"prevout\" (string) The previous transaction output index (if spending) } ] Examples: avian-cli getaddressmempool '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"]}'","title":"getaddressmempool"},{"location":"flightplans/avian-library/address-index/getaddressmempool/#getaddressmempool","text":"Returns all mempool deltas for an address (requires addressindex to be enabled).","title":"getaddressmempool"},{"location":"flightplans/avian-library/address-index/getaddressmempool/#arguments","text":"{ \"addresses\" [ \"address\" (string) The base58check encoded address ,... ] }, \"includeAssets\" (boolean, optional, default false) If true this will return an expanded result which includes asset deltas","title":"Arguments:"},{"location":"flightplans/avian-library/address-index/getaddressmempool/#result","text":"[ { \"address\" (string) The base58check encoded address \"assetName\" (string) The name of the associated asset (AVN for Aviancoin) \"txid\" (string) The related txid \"index\" (number) The related input or output index \"satoshis\" (number) The difference of satoshis \"timestamp\" (number) The time the transaction entered the mempool (seconds) \"prevtxid\" (string) The previous txid (if spending) \"prevout\" (string) The previous transaction output index (if spending) } ]","title":"Result:"},{"location":"flightplans/avian-library/address-index/getaddressmempool/#examples","text":"avian-cli getaddressmempool '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"]}'","title":"Examples:"},{"location":"flightplans/avian-library/address-index/getaddresstxids/","text":"getaddresstxids Returns the txids for an address(es) (requires addressindex to be enabled). Arguments: { \"addresses\" [ \"address\" (string) The base58check encoded address ,... ] \"start\" (number, optional) The start block height \"end\" (number, optional) The end block height }, \"includeAssets\" (boolean, optional, default false) If true this will return an expanded result which includes asset transactions Result: [ \"transactionid\" (string) The transaction id ,... ] Examples: avian-cli getaddresstxids '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"]}'","title":"getaddresstxids"},{"location":"flightplans/avian-library/address-index/getaddresstxids/#getaddresstxids","text":"Returns the txids for an address(es) (requires addressindex to be enabled).","title":"getaddresstxids"},{"location":"flightplans/avian-library/address-index/getaddresstxids/#arguments","text":"{ \"addresses\" [ \"address\" (string) The base58check encoded address ,... ] \"start\" (number, optional) The start block height \"end\" (number, optional) The end block height }, \"includeAssets\" (boolean, optional, default false) If true this will return an expanded result which includes asset transactions","title":"Arguments:"},{"location":"flightplans/avian-library/address-index/getaddresstxids/#result","text":"[ \"transactionid\" (string) The transaction id ,... ]","title":"Result:"},{"location":"flightplans/avian-library/address-index/getaddresstxids/#examples","text":"avian-cli getaddresstxids '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"]}'","title":"Examples:"},{"location":"flightplans/avian-library/address-index/getaddressutxos/","text":"getaddressutxos Returns all unspent outputs for an address (requires addressindex to be enabled). Arguments: { \"addresses\" [ \"address\" (string) The base58check encoded address ,... ], \"chainInfo\", (boolean, optional, default false) Include chain info with results \"assetName\" (string, optional) Get UTXOs for a particular asset instead of AVN ('*' for all assets). } Result [ { \"address\" (string) The address base58check encoded \"assetName\" (string) The asset associated with the UTXOs (AVN for Aviancoin) \"txid\" (string) The output txid \"height\" (number) The block height \"outputIndex\" (number) The output index \"script\" (strin) The script hex encoded \"satoshis\" (number) The number of satoshis of the output } ] Examples: avian-cli getaddressutxos '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"]}'","title":"getaddressutxos"},{"location":"flightplans/avian-library/address-index/getaddressutxos/#getaddressutxos","text":"Returns all unspent outputs for an address (requires addressindex to be enabled).","title":"getaddressutxos"},{"location":"flightplans/avian-library/address-index/getaddressutxos/#arguments","text":"{ \"addresses\" [ \"address\" (string) The base58check encoded address ,... ], \"chainInfo\", (boolean, optional, default false) Include chain info with results \"assetName\" (string, optional) Get UTXOs for a particular asset instead of AVN ('*' for all assets). }","title":"Arguments:"},{"location":"flightplans/avian-library/address-index/getaddressutxos/#result","text":"[ { \"address\" (string) The address base58check encoded \"assetName\" (string) The asset associated with the UTXOs (AVN for Aviancoin) \"txid\" (string) The output txid \"height\" (number) The block height \"outputIndex\" (number) The output index \"script\" (strin) The script hex encoded \"satoshis\" (number) The number of satoshis of the output } ]","title":"Result"},{"location":"flightplans/avian-library/address-index/getaddressutxos/#examples","text":"avian-cli getaddressutxos '{\"addresses\": [\"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\"]}'","title":"Examples:"},{"location":"flightplans/avian-library/assets/getassetdata/","text":"getassetdata Returns assets metadata if that asset exists Arguments: 1. \"asset_name\" (string, required) the name of the asset Result: { na me : (s tr i n g) , amou nt : ( nu mber) , u n i ts : ( nu mber) , reissuable : ( nu mber) , has_ip fs : ( nu mber) , ip fs _hash : (hash) , (o nl y i f has_ip fs = 1 a n d t ha t da ta is a ip fs hash) t xid_hash : (hash) , (o nl y i f has_ip fs = 1 a n d t ha t da ta is a t xid hash) veri f ier_s tr i n g : (s tr i n g) } Examples: avian-cli getassetdata \"ASSET_NAME\"","title":"getassetdata"},{"location":"flightplans/avian-library/assets/getassetdata/#getassetdata","text":"Returns assets metadata if that asset exists Arguments: 1. \"asset_name\" (string, required) the name of the asset Result: { na me : (s tr i n g) , amou nt : ( nu mber) , u n i ts : ( nu mber) , reissuable : ( nu mber) , has_ip fs : ( nu mber) , ip fs _hash : (hash) , (o nl y i f has_ip fs = 1 a n d t ha t da ta is a ip fs hash) t xid_hash : (hash) , (o nl y i f has_ip fs = 1 a n d t ha t da ta is a t xid hash) veri f ier_s tr i n g : (s tr i n g) } Examples: avian-cli getassetdata \"ASSET_NAME\"","title":"getassetdata"},{"location":"flightplans/avian-library/assets/getsnapshot/","text":"getsnapshot Returns details for the asset snapshot, at the specified height Arguments: 1. \"asset_name\" (string, required) the name of the asset 2. block_height (int, required) the block height of the snapshot Result: { na me : (s tr i n g) , heigh t : ( nu mber) , ow ners : [ { address : (s tr i n g) , amou nt _ow ne d : ( nu mber) , } }","title":"getsnapshot"},{"location":"flightplans/avian-library/assets/getsnapshot/#getsnapshot","text":"Returns details for the asset snapshot, at the specified height Arguments: 1. \"asset_name\" (string, required) the name of the asset 2. block_height (int, required) the block height of the snapshot Result: { na me : (s tr i n g) , heigh t : ( nu mber) , ow ners : [ { address : (s tr i n g) , amou nt _ow ne d : ( nu mber) , } }","title":"getsnapshot"},{"location":"flightplans/avian-library/assets/issue/","text":"issue issue \"asset_name\" qty \"( to_address )\" \"( change_address )\" ( units ) ( reissuable ) ( has_ipfs ) \"( ipfs_hash )\" Issue an asset, subasset or unique asset. Asset name must not conflict with any existing asset. Unit as the number of decimals precision for the asset (0 for whole units (\"1\"), 8 for max precision (\"1.00000000\") Reissuable is true/false for whether additional units can be issued by the original issuer. If issuing a unique asset these values are required (and will be defaulted to): qty=1, units=0, reissuable=false. Arguments: 1. \"asset_name\" (string, required) a unique name 2. \"qty\" (numeric, optional, default=1) the number of units to be issued 3. \"to_address\" (string), optional, default=\"\"), address asset will be sent to, if it is empty, address will be generated for you 4. \"change_address\" (string), optional, default=\"\"), address the the avn change will be sent to, if it is empty, change address will be generated for you 5. \"units\" (integer, optional, default=0, min=0, max=8), the number of decimals precision for the asset (0 for whole units (\"1\"), 8 for max precision (\"1.00000000\") 6. \"reissuable\" (boolean, optional, default=true (false for unique assets)), whether future reissuance is allowed 7. \"has_ipfs\" (boolean, optional, default=false), whether ipfs hash is going to be added to the asset 8. \"ipfs_hash\" (string, optional but required if has_ipfs = 1), an ipfs hash or a txid hash once RIP5 is activated Result: \"txid\" (string) The transaction id Examples: avian-cli issue \"ASSET_NAME\" 1000 avian-cli issue \"ASSET_NAME\" 1000 \"myaddress\" avian-cli issue \"ASSET_NAME\" 1000 \"myaddress\" \"changeaddress\" 4 avian-cli issue \"ASSET_NAME\" 1000 \"myaddress\" \"changeaddress\" 2 true avian-cli issue \"ASSET_NAME\" 1000 \"myaddress\" \"changeaddress\" 8 false true QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E avian-cli issue \"ASSET_NAME/SUB_ASSET\" 1000 \"myaddress\" \"changeaddress\" 2 true avian-cli issue \"ASSET_NAME#uniquetag\"","title":"issue"},{"location":"flightplans/avian-library/assets/issue/#issue","text":"issue \"asset_name\" qty \"( to_address )\" \"( change_address )\" ( units ) ( reissuable ) ( has_ipfs ) \"( ipfs_hash )\" Issue an asset, subasset or unique asset. Asset name must not conflict with any existing asset. Unit as the number of decimals precision for the asset (0 for whole units (\"1\"), 8 for max precision (\"1.00000000\") Reissuable is true/false for whether additional units can be issued by the original issuer. If issuing a unique asset these values are required (and will be defaulted to): qty=1, units=0, reissuable=false.","title":"issue"},{"location":"flightplans/avian-library/assets/issue/#arguments","text":"1. \"asset_name\" (string, required) a unique name 2. \"qty\" (numeric, optional, default=1) the number of units to be issued 3. \"to_address\" (string), optional, default=\"\"), address asset will be sent to, if it is empty, address will be generated for you 4. \"change_address\" (string), optional, default=\"\"), address the the avn change will be sent to, if it is empty, change address will be generated for you 5. \"units\" (integer, optional, default=0, min=0, max=8), the number of decimals precision for the asset (0 for whole units (\"1\"), 8 for max precision (\"1.00000000\") 6. \"reissuable\" (boolean, optional, default=true (false for unique assets)), whether future reissuance is allowed 7. \"has_ipfs\" (boolean, optional, default=false), whether ipfs hash is going to be added to the asset 8. \"ipfs_hash\" (string, optional but required if has_ipfs = 1), an ipfs hash or a txid hash once RIP5 is activated","title":"Arguments:"},{"location":"flightplans/avian-library/assets/issue/#result","text":"\"txid\" (string) The transaction id","title":"Result:"},{"location":"flightplans/avian-library/assets/issue/#examples","text":"avian-cli issue \"ASSET_NAME\" 1000 avian-cli issue \"ASSET_NAME\" 1000 \"myaddress\" avian-cli issue \"ASSET_NAME\" 1000 \"myaddress\" \"changeaddress\" 4 avian-cli issue \"ASSET_NAME\" 1000 \"myaddress\" \"changeaddress\" 2 true avian-cli issue \"ASSET_NAME\" 1000 \"myaddress\" \"changeaddress\" 8 false true QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E avian-cli issue \"ASSET_NAME/SUB_ASSET\" 1000 \"myaddress\" \"changeaddress\" 2 true avian-cli issue \"ASSET_NAME#uniquetag\"","title":"Examples:"},{"location":"flightplans/avian-library/assets/listaddressesbyasset/","text":"listaddressesbyasset No doc","title":"listaddressesbyasset"},{"location":"flightplans/avian-library/assets/listaddressesbyasset/#listaddressesbyasset","text":"No doc","title":"listaddressesbyasset"},{"location":"flightplans/avian-library/assets/listassetbalancesbyaddress/","text":"listassetbalancesbyaddress No doc","title":"listassetbalancesbyaddress"},{"location":"flightplans/avian-library/assets/listassetbalancesbyaddress/#listassetbalancesbyaddress","text":"No doc","title":"listassetbalancesbyaddress"},{"location":"flightplans/avian-library/assets/listassets/","text":"listassets Returns a list of all assets Note This could be a slow/expensive operation as it reads from the database. Arguments: 1. \"asset\" (string, optional, default=\"*\") filters results -- must be an asset name or a partial asset name followed by '*' ('*' matches all trailing characters) 2. \"verbose\" (boolean, optional, default=false) when false result is just a list of asset names -- when true results are asset name mapped to metadata 3. \"count\" (integer, optional, default=ALL) truncates results to include only the first _count_ assets found 4. \"start\" (integer, optional, default=0) results skip over the first _start_ assets found (if negative it skips back from the end) Result (verbose=false): [ asset_name, ... ] Result (verbose=true): { (asset_name): { amount: (number), units: (number), reissuable: (number), has_ipfs: (number), ipfs_hash: (hash) (only if has_ipfs = 1 and data is a ipfs hash) ipfs_hash: (hash) (only if has_ipfs = 1 and data is a txid hash) }, {...}, {...} } Examples: avian-cli listassets ASSET avian-cli listassets \"ASSET*\" true 10 20 curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listassets\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"listassets"},{"location":"flightplans/avian-library/assets/listassets/#listassets","text":"Returns a list of all assets Note This could be a slow/expensive operation as it reads from the database.","title":"listassets"},{"location":"flightplans/avian-library/assets/listassets/#arguments","text":"1. \"asset\" (string, optional, default=\"*\") filters results -- must be an asset name or a partial asset name followed by '*' ('*' matches all trailing characters) 2. \"verbose\" (boolean, optional, default=false) when false result is just a list of asset names -- when true results are asset name mapped to metadata 3. \"count\" (integer, optional, default=ALL) truncates results to include only the first _count_ assets found 4. \"start\" (integer, optional, default=0) results skip over the first _start_ assets found (if negative it skips back from the end)","title":"Arguments:"},{"location":"flightplans/avian-library/assets/listassets/#result-verbosefalse","text":"[ asset_name, ... ]","title":"Result (verbose=false):"},{"location":"flightplans/avian-library/assets/listassets/#result-verbosetrue","text":"{ (asset_name): { amount: (number), units: (number), reissuable: (number), has_ipfs: (number), ipfs_hash: (hash) (only if has_ipfs = 1 and data is a ipfs hash) ipfs_hash: (hash) (only if has_ipfs = 1 and data is a txid hash) }, {...}, {...} }","title":"Result (verbose=true):"},{"location":"flightplans/avian-library/assets/listassets/#examples","text":"avian-cli listassets ASSET avian-cli listassets \"ASSET*\" true 10 20 curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listassets\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"Examples:"},{"location":"flightplans/avian-library/assets/listmyassets/","text":"listmyassets Returns a list of all asset that are owned by this wallet Arguments: 1. \"asset\" (string, optional, default=\"*\") filters results -- must be an asset name or a partial asset name followed by '*' ('*' matches all trailing characters) 2. \"verbose\" (boolean, optional, default=false) when false results only contain balances -- when true results include outpoints 3. \"count\" (integer, optional, default=ALL) truncates results to include only the first _count_ assets found 4. \"start\" (integer, optional, default=0) results skip over the first _start_ assets found (if negative it skips back from the end) 5. \"confs\" (integet, optional, default=0) results are skipped if they don't have this number of confirmations Result (verbose=false): { (asset_name): balance, ... } Result (verbose=true): { (asset_name): { \"balance\": balance, \"outpoints\": [ { \"txid\": txid, \"vout\": vout, \"amount\": amount } {...}, {...} ] } } {...}, {...} Examples: avian-cli listmyassets ASSET avian-cli listmyassets \"ASSET*\" true 10 20 avian-cli listmyassets \"ASSET*\" true 10 20 1 curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listmyassets\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"listmyassets"},{"location":"flightplans/avian-library/assets/listmyassets/#listmyassets","text":"Returns a list of all asset that are owned by this wallet","title":"listmyassets"},{"location":"flightplans/avian-library/assets/listmyassets/#arguments","text":"1. \"asset\" (string, optional, default=\"*\") filters results -- must be an asset name or a partial asset name followed by '*' ('*' matches all trailing characters) 2. \"verbose\" (boolean, optional, default=false) when false results only contain balances -- when true results include outpoints 3. \"count\" (integer, optional, default=ALL) truncates results to include only the first _count_ assets found 4. \"start\" (integer, optional, default=0) results skip over the first _start_ assets found (if negative it skips back from the end) 5. \"confs\" (integet, optional, default=0) results are skipped if they don't have this number of confirmations","title":"Arguments:"},{"location":"flightplans/avian-library/assets/listmyassets/#result-verbosefalse","text":"{ (asset_name): balance, ... }","title":"Result (verbose=false):"},{"location":"flightplans/avian-library/assets/listmyassets/#result-verbosetrue","text":"{ (asset_name): { \"balance\": balance, \"outpoints\": [ { \"txid\": txid, \"vout\": vout, \"amount\": amount } {...}, {...} ] } } {...}, {...}","title":"Result (verbose=true):"},{"location":"flightplans/avian-library/assets/listmyassets/#examples","text":"avian-cli listmyassets ASSET avian-cli listmyassets \"ASSET*\" true 10 20 avian-cli listmyassets \"ASSET*\" true 10 20 1 curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listmyassets\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"Examples:"},{"location":"flightplans/avian-library/assets/reissue/","text":"reissue reissue \"asset_name\" qty \"to_address\" \"change_address\" ( reissuable ) ( new_units) \"( new_ipfs )\" Reissues a quantity of an asset to an owned address if you own the Owner Token * Can change the reissuable flag during reissuance * Can change the ipfs hash during reissuance Arguments: 1. \"asset_name\" (string, required) name of asset that is being reissued 2. \"qty\" (numeric, required) number of assets to reissue 3. \"to_address\" (string, required) address to send the asset to 4. \"change_address\" (string, optional) address that the change of the transaction will be sent to 5. \"reissuable\" (boolean, optional, default=true), whether future reissuance is allowed 6. \"new_units\" (numeric, optional, default=-1), the new units that will be associated with the asset 7. \"new_ipfs\" (string, optional, default=\"\"), whether to update the current ipfs hash or txid once RIP5 is active Result: \"txid\" (string) The transaction id Examples: avian-cli reissue \"ASSET_NAME\" 20 \"address\" curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"reissue\", \"params\": [\"ASSET_NAME\" 20 \"address\" \"change_address\" \"true\" 8 \"Qmd286K6pohQcTKYqnS1YhWrCiS4gz7Xi34sdwMe9USZ7u\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"reissue"},{"location":"flightplans/avian-library/assets/reissue/#reissue","text":"reissue \"asset_name\" qty \"to_address\" \"change_address\" ( reissuable ) ( new_units) \"( new_ipfs )\" Reissues a quantity of an asset to an owned address if you own the Owner Token * Can change the reissuable flag during reissuance * Can change the ipfs hash during reissuance","title":"reissue"},{"location":"flightplans/avian-library/assets/reissue/#arguments","text":"1. \"asset_name\" (string, required) name of asset that is being reissued 2. \"qty\" (numeric, required) number of assets to reissue 3. \"to_address\" (string, required) address to send the asset to 4. \"change_address\" (string, optional) address that the change of the transaction will be sent to 5. \"reissuable\" (boolean, optional, default=true), whether future reissuance is allowed 6. \"new_units\" (numeric, optional, default=-1), the new units that will be associated with the asset 7. \"new_ipfs\" (string, optional, default=\"\"), whether to update the current ipfs hash or txid once RIP5 is active","title":"Arguments:"},{"location":"flightplans/avian-library/assets/reissue/#result","text":"\"txid\" (string) The transaction id","title":"Result:"},{"location":"flightplans/avian-library/assets/reissue/#examples","text":"avian-cli reissue \"ASSET_NAME\" 20 \"address\" curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"reissue\", \"params\": [\"ASSET_NAME\" 20 \"address\" \"change_address\" \"true\" 8 \"Qmd286K6pohQcTKYqnS1YhWrCiS4gz7Xi34sdwMe9USZ7u\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"Examples:"},{"location":"flightplans/avian-library/assets/transfer/","text":"transfer transfer \"asset_name\" qty \"to_address\" \"message\" expire_time \"change_address\" \"asset_change_address\" Transfers a quantity of an owned asset to a given address Arguments: 1. \"asset_name\" (string, required) name of asset 2. \"qty\" (numeric, required) number of assets you want to send to the address 3. \"to_address\" (string, required) address to send the asset to 4. \"message\" (string, optional) Once RIP5 is voted in ipfs hash or txid hash to send along with the transfer 5. \"expire_time\" (numeric, optional) UTC timestamp of when the message expires 6. \"change_address\" (string, optional, default = \"\") the transactions AVN change will be sent to this address 7. \"asset_change_address\" (string, optional, default = \"\") the transactions Asset change will be sent to this address Result: txid[ txid ] Examples: avian-cli transfer \"ASSET_NAME\" 20 \"address\" \"\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 15863654 avian-cli transfer \"ASSET_NAME\" 20 \"address\" \"\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 15863654","title":"transfer"},{"location":"flightplans/avian-library/assets/transfer/#transfer","text":"transfer \"asset_name\" qty \"to_address\" \"message\" expire_time \"change_address\" \"asset_change_address\" Transfers a quantity of an owned asset to a given address","title":"transfer"},{"location":"flightplans/avian-library/assets/transfer/#arguments","text":"1. \"asset_name\" (string, required) name of asset 2. \"qty\" (numeric, required) number of assets you want to send to the address 3. \"to_address\" (string, required) address to send the asset to 4. \"message\" (string, optional) Once RIP5 is voted in ipfs hash or txid hash to send along with the transfer 5. \"expire_time\" (numeric, optional) UTC timestamp of when the message expires 6. \"change_address\" (string, optional, default = \"\") the transactions AVN change will be sent to this address 7. \"asset_change_address\" (string, optional, default = \"\") the transactions Asset change will be sent to this address","title":"Arguments:"},{"location":"flightplans/avian-library/assets/transfer/#result","text":"txid[ txid ]","title":"Result:"},{"location":"flightplans/avian-library/assets/transfer/#examples","text":"avian-cli transfer \"ASSET_NAME\" 20 \"address\" \"\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 15863654 avian-cli transfer \"ASSET_NAME\" 20 \"address\" \"\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 15863654","title":"Examples:"},{"location":"flightplans/avian-library/assets/transferfromaddress/","text":"transferfromaddress transferfromaddress \"asset_name\" \"from_address\" qty \"to_address\" \"message\" expire_time \"avn_change_address\" \"asset_change_address\" Transfer a quantity of an owned asset in a specific address to a given address Arguments: 1. \"asset_name\" (string, required) name of asset 2. \"from_address\" (string, required) address that the asset will be transferred from 3. \"qty\" (numeric, required) number of assets you want to send to the address 4. \"to_address\" (string, required) address to send the asset to 5. \"message\" (string, optional) Once RIP5 is voted in ipfs hash or txid hash to send along with the transfer 6. \"expire_time\" (numeric, optional) UTC timestamp of when the message expires 7. \"avn_change_address\" (string, optional, default = \"\") the transaction AVN change will be sent to this address 8. \"asset_change_address\" (string, optional, default = \"\") the transaction Asset change will be sent to this address Result: txid[ txid ] Examples: avian-cli transferfromaddress \"ASSET_NAME\" \"fromaddress\" 20 \"address\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\", 156545652 curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"transferfromaddress\", \"params\": [\"ASSET_NAME\" \"fromaddress\" 20 \"address\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\", 156545652] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"transferfromaddress"},{"location":"flightplans/avian-library/assets/transferfromaddress/#transferfromaddress","text":"transferfromaddress \"asset_name\" \"from_address\" qty \"to_address\" \"message\" expire_time \"avn_change_address\" \"asset_change_address\" Transfer a quantity of an owned asset in a specific address to a given address","title":"transferfromaddress"},{"location":"flightplans/avian-library/assets/transferfromaddress/#arguments","text":"1. \"asset_name\" (string, required) name of asset 2. \"from_address\" (string, required) address that the asset will be transferred from 3. \"qty\" (numeric, required) number of assets you want to send to the address 4. \"to_address\" (string, required) address to send the asset to 5. \"message\" (string, optional) Once RIP5 is voted in ipfs hash or txid hash to send along with the transfer 6. \"expire_time\" (numeric, optional) UTC timestamp of when the message expires 7. \"avn_change_address\" (string, optional, default = \"\") the transaction AVN change will be sent to this address 8. \"asset_change_address\" (string, optional, default = \"\") the transaction Asset change will be sent to this address","title":"Arguments:"},{"location":"flightplans/avian-library/assets/transferfromaddress/#result","text":"txid[ txid ]","title":"Result:"},{"location":"flightplans/avian-library/assets/transferfromaddress/#examples","text":"avian-cli transferfromaddress \"ASSET_NAME\" \"fromaddress\" 20 \"address\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\", 156545652 curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"transferfromaddress\", \"params\": [\"ASSET_NAME\" \"fromaddress\" 20 \"address\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\", 156545652] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"Examples:"},{"location":"flightplans/avian-library/assets/transferfromaddresses/","text":"transferfromaddresses transferfromaddresses \"asset_name\" [\"from_addresses\"] qty \"to_address\" \"message\" expire_time \"avn_change_address\" \"asset_change_address\" Transfer a quantity of an owned asset in specific address(es) to a given address Arguments: 1. \"asset_name\" (string, required) name of asset 2. \"from_addresses\" (array, required) list of from addresses to send from 3. \"qty\" (numeric, required) number of assets you want to send to the address 4. \"to_address\" (string, required) address to send the asset to 5. \"message\" (string, optional) Once RIP5 is voted in ipfs hash or txid hash to send along with the transfer 6. \"expire_time\" (numeric, optional) UTC timestamp of when the message expires 7. \"avn_change_address\" (string, optional, default = \"\") the transactions AVN change will be sent to this address 8. \"asset_change_address\" (string, optional, default = \"\") the transactions Asset change will be sent to this address Result: txid[ txid ] Examples: avian-cli transferfromaddresses \"ASSET_NAME\" '[\"fromaddress1\", \"fromaddress2\"]' 20 \"to_address\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 154652365 curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"transferfromaddresses\", \"params\": [\"ASSET_NAME\" '[\"fromaddress1\", \"fromaddress2\"]' 20 \"to_address\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 154652365] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"transferfromaddresses"},{"location":"flightplans/avian-library/assets/transferfromaddresses/#transferfromaddresses","text":"transferfromaddresses \"asset_name\" [\"from_addresses\"] qty \"to_address\" \"message\" expire_time \"avn_change_address\" \"asset_change_address\" Transfer a quantity of an owned asset in specific address(es) to a given address","title":"transferfromaddresses"},{"location":"flightplans/avian-library/assets/transferfromaddresses/#arguments","text":"1. \"asset_name\" (string, required) name of asset 2. \"from_addresses\" (array, required) list of from addresses to send from 3. \"qty\" (numeric, required) number of assets you want to send to the address 4. \"to_address\" (string, required) address to send the asset to 5. \"message\" (string, optional) Once RIP5 is voted in ipfs hash or txid hash to send along with the transfer 6. \"expire_time\" (numeric, optional) UTC timestamp of when the message expires 7. \"avn_change_address\" (string, optional, default = \"\") the transactions AVN change will be sent to this address 8. \"asset_change_address\" (string, optional, default = \"\") the transactions Asset change will be sent to this address","title":"Arguments:"},{"location":"flightplans/avian-library/assets/transferfromaddresses/#result","text":"txid[ txid ]","title":"Result:"},{"location":"flightplans/avian-library/assets/transferfromaddresses/#examples","text":"avian-cli transferfromaddresses \"ASSET_NAME\" '[\"fromaddress1\", \"fromaddress2\"]' 20 \"to_address\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 154652365 curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"transferfromaddresses\", \"params\": [\"ASSET_NAME\" '[\"fromaddress1\", \"fromaddress2\"]' 20 \"to_address\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 154652365] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"Examples:"},{"location":"flightplans/avian-library/blockchain/getbestblockhash/","text":"getbestblockhash Returns the hash of the best (tip) block in the longest blockchain. Result: \"hex\" (string) the block hash hex encoded Examples: avian-cli getbestblockhash","title":"getbestblockhash"},{"location":"flightplans/avian-library/blockchain/getbestblockhash/#getbestblockhash","text":"Returns the hash of the best (tip) block in the longest blockchain.","title":"getbestblockhash"},{"location":"flightplans/avian-library/blockchain/getbestblockhash/#result","text":"\"hex\" (string) the block hash hex encoded Examples: avian-cli getbestblockhash","title":"Result:"},{"location":"flightplans/avian-library/blockchain/getblock/","text":"getblock getblock \"blockhash\" ( verbosity ) If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'. If verbosity is 1, returns an Object with information about block . If verbosity is 2, returns an Object with information about block and information about each transaction. Arguments: \"blockhash\" (string, required) The block hash verbosity (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data Result (for verbosity = 0): \"data\" (string) A string that is serialized, hex-encoded data for block 'hash'. Result (for verbosity = 1): { \"hash\" : \"hash\", (string) the block hash (same as provided) \"powtype\" : \"x16rt\"|\"minotaurx\"|\"unrecognised\", (string) Indicates the pow mining type of the block \"confirmations\" : n, (numeric) The number of confirmations, or -1 if the block is not on the main chain \"size\" : n, (numeric) The block size \"strippedsize\" : n, (numeric) The block size excluding witness data \"weight\" : n (numeric) The block weight as defined in BIP 141 \"height\" : n, (numeric) The block height or index \"version\" : n, (numeric) The block version \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal \"merkleroot\" : \"xxxx\", (string) The merkle root \"tx\" : [ (array of string) The transaction ids \"transactionid\" (string) The transaction id ,... ], \"time\" : ttt, (numeric) The block time in seconds since epoch (Jan 1 1970 GMT) \"mediantime\" : ttt, (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT) \"nonce\" : n, (numeric) The nonce \"bits\" : \"1d00ffff\", (string) The bits \"difficulty\" : x.xxx, (numeric) The difficulty \"chainwork\" : \"xxxx\", (string) Expected number of hashes required to produce the chain up to this block (in hex) \"nTx\", : \"x\", (string) The number of transactions in the block \"previousblockhash\" : \"hash\", (string) The hash of the previous block \"nextblockhash\" : \"hash\" (string) The hash of the next block } Result (for verbosity = 2): { ..., Same output as verbosity = 1. \"tx\" : [ (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result. ,... ], ,... Same output as verbosity = 1. } Examples: avian-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"","title":"getblock"},{"location":"flightplans/avian-library/blockchain/getblock/#getblock","text":"getblock \"blockhash\" ( verbosity ) If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'. If verbosity is 1, returns an Object with information about block . If verbosity is 2, returns an Object with information about block and information about each transaction.","title":"getblock"},{"location":"flightplans/avian-library/blockchain/getblock/#arguments","text":"\"blockhash\" (string, required) The block hash verbosity (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data","title":"Arguments:"},{"location":"flightplans/avian-library/blockchain/getblock/#result-for-verbosity-0","text":"\"data\" (string) A string that is serialized, hex-encoded data for block 'hash'.","title":"Result (for verbosity = 0):"},{"location":"flightplans/avian-library/blockchain/getblock/#result-for-verbosity-1","text":"{ \"hash\" : \"hash\", (string) the block hash (same as provided) \"powtype\" : \"x16rt\"|\"minotaurx\"|\"unrecognised\", (string) Indicates the pow mining type of the block \"confirmations\" : n, (numeric) The number of confirmations, or -1 if the block is not on the main chain \"size\" : n, (numeric) The block size \"strippedsize\" : n, (numeric) The block size excluding witness data \"weight\" : n (numeric) The block weight as defined in BIP 141 \"height\" : n, (numeric) The block height or index \"version\" : n, (numeric) The block version \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal \"merkleroot\" : \"xxxx\", (string) The merkle root \"tx\" : [ (array of string) The transaction ids \"transactionid\" (string) The transaction id ,... ], \"time\" : ttt, (numeric) The block time in seconds since epoch (Jan 1 1970 GMT) \"mediantime\" : ttt, (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT) \"nonce\" : n, (numeric) The nonce \"bits\" : \"1d00ffff\", (string) The bits \"difficulty\" : x.xxx, (numeric) The difficulty \"chainwork\" : \"xxxx\", (string) Expected number of hashes required to produce the chain up to this block (in hex) \"nTx\", : \"x\", (string) The number of transactions in the block \"previousblockhash\" : \"hash\", (string) The hash of the previous block \"nextblockhash\" : \"hash\" (string) The hash of the next block } Result (for verbosity = 2): { ..., Same output as verbosity = 1. \"tx\" : [ (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result. ,... ], ,... Same output as verbosity = 1. } Examples: avian-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"","title":"Result (for verbosity = 1):"},{"location":"flightplans/avian-library/blockchain/getblockchaininfo/","text":"getblockchaininfo Returns an object containing various state info regarding blockchain processing. Result: { \"chain\": \"xxxx\", (string) current network name as defined in BIP70 (main, test, regtest) \"blocks\": xxxxxx, (numeric) the current number of blocks processed in the server \"headers\": xxxxxx, (numeric) the current number of headers we have validated \"bestblockhash\": \"...\", (string) the hash of the currently best block \"difficulty\": xxxxxx, (numeric) the current difficulty \"difficulty_algoname\": x (string) difficulty per algorithm after crow activation \"mediantime\": xxxxxx, (numeric) median time for the current best block \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1] \"chainwork\": \"xxxx\" (string) total amount of work in active chain, in hexadecimal \"size_on_disk\": xxxxxx, (numeric) the estimated size of the block and undo files on disk \"pruned\": xx, (boolean) if the blocks are subject to pruning \"pruneheight\": xxxxxx, (numeric) lowest-height complete block stored (only present if pruning is enabled) \"automatic_pruning\": xx, (boolean) whether automatic pruning is enabled (only present if pruning is enabled) \"prune_target_size\": xxxxxx, (numeric) the target size used by pruning (only present if automatic pruning is enabled) \"softforks\": [ (array) status of softforks in progress { \"id\": \"xxxx\", (string) name of softfork \"version\": xx, (numeric) block version \"reject\": { (object) progress toward rejecting pre-softfork blocks \"status\": xx, (boolean) true if threshold reached }, }, ... ], \"bip9_softforks\": { (object) status of BIP9 softforks in progress \"xxxx\" : { (string) name of the softfork \"status\": \"xxxx\", (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\" \"bit\": xx, (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status) \"startTime\": xx, (numeric) the minimum median time past of a block at which the bit gains its meaning \"timeout\": xx, (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in \"since\": xx, (numeric) height of the first block to which the status applies \"statistics\": { (object) numeric statistics about BIP9 signalling for a softfork (only for \"started\" status) \"period\": xx, (numeric) the length in blocks of the BIP9 signalling period \"threshold\": xx, (numeric) the number of blocks with the version bit set required to activate the feature \"elapsed\": xx, (numeric) the number of blocks elapsed since the beginning of the current period \"count\": xx, (numeric) the number of blocks with the version bit set in the current period \"possible\": xx (boolean) returns false if there are not enough blocks left in this period to pass activation threshold } } } \"warnings\" : \"...\", (string) any network and blockchain warnings. } Examples: avian-cli getblockchaininfo","title":"getblockchaininfo"},{"location":"flightplans/avian-library/blockchain/getblockchaininfo/#getblockchaininfo","text":"Returns an object containing various state info regarding blockchain processing.","title":"getblockchaininfo"},{"location":"flightplans/avian-library/blockchain/getblockchaininfo/#result","text":"{ \"chain\": \"xxxx\", (string) current network name as defined in BIP70 (main, test, regtest) \"blocks\": xxxxxx, (numeric) the current number of blocks processed in the server \"headers\": xxxxxx, (numeric) the current number of headers we have validated \"bestblockhash\": \"...\", (string) the hash of the currently best block \"difficulty\": xxxxxx, (numeric) the current difficulty \"difficulty_algoname\": x (string) difficulty per algorithm after crow activation \"mediantime\": xxxxxx, (numeric) median time for the current best block \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1] \"chainwork\": \"xxxx\" (string) total amount of work in active chain, in hexadecimal \"size_on_disk\": xxxxxx, (numeric) the estimated size of the block and undo files on disk \"pruned\": xx, (boolean) if the blocks are subject to pruning \"pruneheight\": xxxxxx, (numeric) lowest-height complete block stored (only present if pruning is enabled) \"automatic_pruning\": xx, (boolean) whether automatic pruning is enabled (only present if pruning is enabled) \"prune_target_size\": xxxxxx, (numeric) the target size used by pruning (only present if automatic pruning is enabled) \"softforks\": [ (array) status of softforks in progress { \"id\": \"xxxx\", (string) name of softfork \"version\": xx, (numeric) block version \"reject\": { (object) progress toward rejecting pre-softfork blocks \"status\": xx, (boolean) true if threshold reached }, }, ... ], \"bip9_softforks\": { (object) status of BIP9 softforks in progress \"xxxx\" : { (string) name of the softfork \"status\": \"xxxx\", (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\" \"bit\": xx, (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status) \"startTime\": xx, (numeric) the minimum median time past of a block at which the bit gains its meaning \"timeout\": xx, (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in \"since\": xx, (numeric) height of the first block to which the status applies \"statistics\": { (object) numeric statistics about BIP9 signalling for a softfork (only for \"started\" status) \"period\": xx, (numeric) the length in blocks of the BIP9 signalling period \"threshold\": xx, (numeric) the number of blocks with the version bit set required to activate the feature \"elapsed\": xx, (numeric) the number of blocks elapsed since the beginning of the current period \"count\": xx, (numeric) the number of blocks with the version bit set in the current period \"possible\": xx (boolean) returns false if there are not enough blocks left in this period to pass activation threshold } } } \"warnings\" : \"...\", (string) any network and blockchain warnings. } Examples: avian-cli getblockchaininfo","title":"Result:"},{"location":"flightplans/avian-library/blockchain/getblockcount/","text":"getblockcount Returns the number of blocks in the longest blockchain. Result: n (numeric) The current block count Examples: avian-cli getblockcount","title":"getblockcount"},{"location":"flightplans/avian-library/blockchain/getblockcount/#getblockcount","text":"Returns the number of blocks in the longest blockchain. Result: n (numeric) The current block count Examples: avian-cli getblockcount","title":"getblockcount"},{"location":"flightplans/avian-library/blockchain/getblockhash/","text":"getblockhash Returns hash of block in best-block-chain at height provided. Arguments: height (numeric, required) The height index Result: \"hash\" (string) The block hash Examples: avian-cli getblockhash 1000","title":"getblockhash"},{"location":"flightplans/avian-library/blockchain/getblockhash/#getblockhash","text":"Returns hash of block in best-block-chain at height provided. Arguments: height (numeric, required) The height index Result: \"hash\" (string) The block hash Examples: avian-cli getblockhash 1000","title":"getblockhash"},{"location":"flightplans/avian-library/blockchain/getblockhashes/","text":"getblockhashes Returns array of hashes of blocks within the timestamp range provided. Arguments: high (numeric, required) The newer block timestamp low (numeric, required) The older block timestamp options (string, required) A json object { \"noOrphans\":true (boolean) will only include blocks on the main chain \"logicalTimes\":true (boolean) will include logical timestamps with hashes } Result: [ \"hash\" (string) The block hash ] [ { \"blockhash\": (string) The block hash \"logicalts\": (numeric) The logical timestamp } ] Examples: avian-cli getblockhashes 1231614698 1231024505","title":"getblockhashes"},{"location":"flightplans/avian-library/blockchain/getblockhashes/#getblockhashes","text":"Returns array of hashes of blocks within the timestamp range provided. Arguments: high (numeric, required) The newer block timestamp low (numeric, required) The older block timestamp options (string, required) A json object { \"noOrphans\":true (boolean) will only include blocks on the main chain \"logicalTimes\":true (boolean) will include logical timestamps with hashes } Result: [ \"hash\" (string) The block hash ] [ { \"blockhash\": (string) The block hash \"logicalts\": (numeric) The logical timestamp } ] Examples: avian-cli getblockhashes 1231614698 1231024505","title":"getblockhashes"},{"location":"flightplans/avian-library/blockchain/getblockheader/","text":"getblockheader If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader . Arguments: \"hash\" (string, required) The block hash verbose (boolean, optional, default=true) true for a json object, false for the hex encoded data Result (for verbose = true): { \"hash\" : \"hash\", (string) the block hash (same as provided) \"powtype\" : \"x16rt\"|\"minotaurx\"|\"unrecognised\", (string) Indicates the pow mining type of the block \"confirmations\" : n, (numeric) The number of confirmations, or -1 if the block is not on the main chain \"height\" : n, (numeric) The block height or index \"version\" : n, (numeric) The block version \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal \"merkleroot\" : \"xxxx\", (string) The merkle root \"time\" : ttt, (numeric) The block time in seconds since epoch (Jan 1 1970 GMT) \"mediantime\" : ttt, (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT) \"nonce\" : n, (numeric) The nonce \"bits\" : \"1d00ffff\", (string) The bits \"difficulty\" : x.xxx, (numeric) The difficulty \"nTx\", : \"x\", (string) The number of transactions in the block \"chainwork\" : \"0000...1f3\" (string) Expected number of hashes required to produce the current chain (in hex) \"previousblockhash\" : \"hash\", (string) The hash of the previous block \"nextblockhash\" : \"hash\", (string) The hash of the next block } Result (for verbose=false): \"data\" (string) A string that is serialized, hex-encoded data for block 'hash'. Examples: avian-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"","title":"getblockheader"},{"location":"flightplans/avian-library/blockchain/getblockheader/#getblockheader","text":"If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader .","title":"getblockheader"},{"location":"flightplans/avian-library/blockchain/getblockheader/#arguments","text":"\"hash\" (string, required) The block hash verbose (boolean, optional, default=true) true for a json object, false for the hex encoded data","title":"Arguments:"},{"location":"flightplans/avian-library/blockchain/getblockheader/#result-for-verbose-true","text":"{ \"hash\" : \"hash\", (string) the block hash (same as provided) \"powtype\" : \"x16rt\"|\"minotaurx\"|\"unrecognised\", (string) Indicates the pow mining type of the block \"confirmations\" : n, (numeric) The number of confirmations, or -1 if the block is not on the main chain \"height\" : n, (numeric) The block height or index \"version\" : n, (numeric) The block version \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal \"merkleroot\" : \"xxxx\", (string) The merkle root \"time\" : ttt, (numeric) The block time in seconds since epoch (Jan 1 1970 GMT) \"mediantime\" : ttt, (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT) \"nonce\" : n, (numeric) The nonce \"bits\" : \"1d00ffff\", (string) The bits \"difficulty\" : x.xxx, (numeric) The difficulty \"nTx\", : \"x\", (string) The number of transactions in the block \"chainwork\" : \"0000...1f3\" (string) Expected number of hashes required to produce the current chain (in hex) \"previousblockhash\" : \"hash\", (string) The hash of the previous block \"nextblockhash\" : \"hash\", (string) The hash of the next block }","title":"Result (for verbose = true):"},{"location":"flightplans/avian-library/blockchain/getblockheader/#result-for-verbosefalse","text":"\"data\" (string) A string that is serialized, hex-encoded data for block 'hash'. Examples: avian-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"","title":"Result (for verbose=false):"},{"location":"flightplans/avian-library/blockchain/getchaintips/","text":"getchaintips Return information about all known tips in the block tree, including the main chain as well as orphaned branches. Result: [ { \"height\": xxxx, (numeric) height of the chain tip \"hash\": \"xxxx\", (string) block hash of the tip \"branchlen\": 0 (numeric) zero for main chain \"status\": \"active\" (string) \"active\" for the main chain }, { \"height\": xxxx, \"hash\": \"xxxx\", \"branchlen\": 1 (numeric) length of branch connecting the tip to the main chain \"status\": \"xxxx\" (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid) } ] Possible values for status: \"invalid\" This branch contains at least one invalid block \"headers-only\" Not all blocks for this branch are available, but the headers are valid \"valid-headers\" All blocks are available for this branch, but they were never fully validated \"valid-fork\" This branch is not part of the active chain, but is fully validated \"active\" This is the tip of the active main chain, which is certainly valid Examples: avian-cli getchaintips","title":"getchaintips"},{"location":"flightplans/avian-library/blockchain/getchaintips/#getchaintips","text":"Return information about all known tips in the block tree, including the main chain as well as orphaned branches. Result: [ { \"height\": xxxx, (numeric) height of the chain tip \"hash\": \"xxxx\", (string) block hash of the tip \"branchlen\": 0 (numeric) zero for main chain \"status\": \"active\" (string) \"active\" for the main chain }, { \"height\": xxxx, \"hash\": \"xxxx\", \"branchlen\": 1 (numeric) length of branch connecting the tip to the main chain \"status\": \"xxxx\" (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid) } ] Possible values for status: \"invalid\" This branch contains at least one invalid block \"headers-only\" Not all blocks for this branch are available, but the headers are valid \"valid-headers\" All blocks are available for this branch, but they were never fully validated \"valid-fork\" This branch is not part of the active chain, but is fully validated \"active\" This is the tip of the active main chain, which is certainly valid Examples: avian-cli getchaintips","title":"getchaintips"},{"location":"flightplans/avian-library/blockchain/getchaintxstats/","text":"getchaintxstats Compute statistics about the total number and rate of transactions in the chain. Arguments: nblocks (numeric, optional) Size of the window in number of blocks (default: one month). \"blockhash\" (string, optional) The hash of the block that ends the window. Result: { \"time\": xxxxx, (numeric) The timestamp for the final block in the window in UNIX format. \"txcount\": xxxxx, (numeric) The total number of transactions in the chain up to that point. \"window_block_count\": xxxxx, (numeric) Size of the window in number of blocks. \"window_tx_count\": xxxxx, (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is > 0. \"window_interval\": xxxxx, (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is > 0. \"txrate\": x.xx, (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0. } Examples: avian-cli getchaintxstats","title":"getchaintxstats"},{"location":"flightplans/avian-library/blockchain/getchaintxstats/#getchaintxstats","text":"Compute statistics about the total number and rate of transactions in the chain. Arguments: nblocks (numeric, optional) Size of the window in number of blocks (default: one month). \"blockhash\" (string, optional) The hash of the block that ends the window. Result: { \"time\": xxxxx, (numeric) The timestamp for the final block in the window in UNIX format. \"txcount\": xxxxx, (numeric) The total number of transactions in the chain up to that point. \"window_block_count\": xxxxx, (numeric) Size of the window in number of blocks. \"window_tx_count\": xxxxx, (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is > 0. \"window_interval\": xxxxx, (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is > 0. \"txrate\": x.xx, (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0. } Examples: avian-cli getchaintxstats","title":"getchaintxstats"},{"location":"flightplans/avian-library/blockchain/getdifficulty/","text":"getdifficulty getdifficulty ( powalgo ) Returns the proof-of-work difficulty as a multiple of the minimum difficulty. Arguments: \"powalgo\":\"xxxx\" (string, optional) This can be set to \"x16rt\" or \"minotaurx\". If omitted, wallet's default is assumed (-powalgo conf option) Result: n.nnn (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty. Examples: avian-cli getdifficulty","title":"getdifficulty"},{"location":"flightplans/avian-library/blockchain/getdifficulty/#getdifficulty","text":"getdifficulty ( powalgo ) Returns the proof-of-work difficulty as a multiple of the minimum difficulty. Arguments: \"powalgo\":\"xxxx\" (string, optional) This can be set to \"x16rt\" or \"minotaurx\". If omitted, wallet's default is assumed (-powalgo conf option) Result: n.nnn (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty. Examples: avian-cli getdifficulty","title":"getdifficulty"},{"location":"flightplans/avian-library/blockchain/getmempoolancestors/","text":"getmempoolancestors If txid is in the mempool, returns all in-mempool ancestors. Arguments: \"txid\" (string, required) The transaction id (must be in mempool) verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids Result (for verbose=false): [ (json array of strings) \"transactionid\" (string) The transaction id of an in-mempool ancestor transaction ,... ] Result (for verbose=true): { (json object) \"transactionid\" : { (json object) \"size\" : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted. \"fee\" : n, (numeric) transaction fee in AVN \"modifiedfee\" : n, (numeric) transaction fee with fee deltas used for mining priority \"time\" : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT \"height\" : n, (numeric) block height when transaction entered pool \"descendantcount\" : n, (numeric) number of in-mempool descendant transactions (including this one) \"descendantsize\" : n, (numeric) virtual transaction size of in-mempool descendants (including this one) \"descendantfees\" : n, (numeric) modified fees (see above) of in-mempool descendants (including this one) \"ancestorcount\" : n, (numeric) number of in-mempool ancestor transactions (including this one) \"ancestorsize\" : n, (numeric) virtual transaction size of in-mempool ancestors (including this one) \"ancestorfees\" : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one) \"wtxid\" : hash, (string) hash of serialized transaction, including witness data \"depends\" : [ (array) unconfirmed transactions used as inputs for this transaction \"transactionid\", (string) parent transaction id ... ] }, ... } Examples: avian-cli getmempoolancestors \"mytxid\"","title":"getmempoolancestors"},{"location":"flightplans/avian-library/blockchain/getmempoolancestors/#getmempoolancestors","text":"If txid is in the mempool, returns all in-mempool ancestors. Arguments: \"txid\" (string, required) The transaction id (must be in mempool) verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids","title":"getmempoolancestors"},{"location":"flightplans/avian-library/blockchain/getmempoolancestors/#result-for-verbosefalse","text":"[ (json array of strings) \"transactionid\" (string) The transaction id of an in-mempool ancestor transaction ,... ]","title":"Result (for verbose=false):"},{"location":"flightplans/avian-library/blockchain/getmempoolancestors/#result-for-verbosetrue","text":"{ (json object) \"transactionid\" : { (json object) \"size\" : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted. \"fee\" : n, (numeric) transaction fee in AVN \"modifiedfee\" : n, (numeric) transaction fee with fee deltas used for mining priority \"time\" : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT \"height\" : n, (numeric) block height when transaction entered pool \"descendantcount\" : n, (numeric) number of in-mempool descendant transactions (including this one) \"descendantsize\" : n, (numeric) virtual transaction size of in-mempool descendants (including this one) \"descendantfees\" : n, (numeric) modified fees (see above) of in-mempool descendants (including this one) \"ancestorcount\" : n, (numeric) number of in-mempool ancestor transactions (including this one) \"ancestorsize\" : n, (numeric) virtual transaction size of in-mempool ancestors (including this one) \"ancestorfees\" : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one) \"wtxid\" : hash, (string) hash of serialized transaction, including witness data \"depends\" : [ (array) unconfirmed transactions used as inputs for this transaction \"transactionid\", (string) parent transaction id ... ] }, ... }","title":"Result (for verbose=true):"},{"location":"flightplans/avian-library/blockchain/getmempoolancestors/#examples","text":"avian-cli getmempoolancestors \"mytxid\"","title":"Examples:"},{"location":"flightplans/avian-library/blockchain/getmempooldescendants/","text":"getmempooldescendants If txid is in the mempool, returns all in-mempool descendants. Arguments: \"txid\" (string, required) The transaction id (must be in mempool) verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids Result (for verbose=false): [ (json array of strings) \"transactionid\" (string) The transaction id of an in-mempool descendant transaction ,... ] Result (for verbose=true): { (json object) \"transactionid\" : { (json object) \"size\" : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted. \"fee\" : n, (numeric) transaction fee in AVN \"modifiedfee\" : n, (numeric) transaction fee with fee deltas used for mining priority \"time\" : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT \"height\" : n, (numeric) block height when transaction entered pool \"descendantcount\" : n, (numeric) number of in-mempool descendant transactions (including this one) \"descendantsize\" : n, (numeric) virtual transaction size of in-mempool descendants (including this one) \"descendantfees\" : n, (numeric) modified fees (see above) of in-mempool descendants (including this one) \"ancestorcount\" : n, (numeric) number of in-mempool ancestor transactions (including this one) \"ancestorsize\" : n, (numeric) virtual transaction size of in-mempool ancestors (including this one) \"ancestorfees\" : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one) \"wtxid\" : hash, (string) hash of serialized transaction, including witness data \"depends\" : [ (array) unconfirmed transactions used as inputs for this transaction \"transactionid\", (string) parent transaction id ... ] }, ... } Examples: avian-cli getmempooldescendants \"mytxid\"","title":"getmempooldescendants"},{"location":"flightplans/avian-library/blockchain/getmempooldescendants/#getmempooldescendants","text":"If txid is in the mempool, returns all in-mempool descendants.","title":"getmempooldescendants"},{"location":"flightplans/avian-library/blockchain/getmempooldescendants/#arguments","text":"\"txid\" (string, required) The transaction id (must be in mempool) verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids","title":"Arguments:"},{"location":"flightplans/avian-library/blockchain/getmempooldescendants/#result-for-verbosefalse","text":"[ (json array of strings) \"transactionid\" (string) The transaction id of an in-mempool descendant transaction ,... ]","title":"Result (for verbose=false):"},{"location":"flightplans/avian-library/blockchain/getmempooldescendants/#result-for-verbosetrue","text":"{ (json object) \"transactionid\" : { (json object) \"size\" : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted. \"fee\" : n, (numeric) transaction fee in AVN \"modifiedfee\" : n, (numeric) transaction fee with fee deltas used for mining priority \"time\" : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT \"height\" : n, (numeric) block height when transaction entered pool \"descendantcount\" : n, (numeric) number of in-mempool descendant transactions (including this one) \"descendantsize\" : n, (numeric) virtual transaction size of in-mempool descendants (including this one) \"descendantfees\" : n, (numeric) modified fees (see above) of in-mempool descendants (including this one) \"ancestorcount\" : n, (numeric) number of in-mempool ancestor transactions (including this one) \"ancestorsize\" : n, (numeric) virtual transaction size of in-mempool ancestors (including this one) \"ancestorfees\" : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one) \"wtxid\" : hash, (string) hash of serialized transaction, including witness data \"depends\" : [ (array) unconfirmed transactions used as inputs for this transaction \"transactionid\", (string) parent transaction id ... ] }, ... }","title":"Result (for verbose=true):"},{"location":"flightplans/avian-library/blockchain/getmempooldescendants/#examples","text":"avian-cli getmempooldescendants \"mytxid\"","title":"Examples:"},{"location":"flightplans/avian-library/blockchain/getmempoolentry/","text":"getmempoolentry Returns mempool data for given transaction Arguments: \"txid\" (string, required) The transaction id (must be in mempool) Result: { (json object) \"size\" : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted. \"fee\" : n, (numeric) transaction fee in AVN \"modifiedfee\" : n, (numeric) transaction fee with fee deltas used for mining priority \"time\" : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT \"height\" : n, (numeric) block height when transaction entered pool \"descendantcount\" : n, (numeric) number of in-mempool descendant transactions (including this one) \"descendantsize\" : n, (numeric) virtual transaction size of in-mempool descendants (including this one) \"descendantfees\" : n, (numeric) modified fees (see above) of in-mempool descendants (including this one) \"ancestorcount\" : n, (numeric) number of in-mempool ancestor transactions (including this one) \"ancestorsize\" : n, (numeric) virtual transaction size of in-mempool ancestors (including this one) \"ancestorfees\" : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one) \"wtxid\" : hash, (string) hash of serialized transaction, including witness data \"depends\" : [ (array) unconfirmed transactions used as inputs for this transaction \"transactionid\", (string) parent transaction id ... ] } Examples: avian-cli getmempoolentry \"mytxid\"","title":"getmempoolentry"},{"location":"flightplans/avian-library/blockchain/getmempoolentry/#getmempoolentry","text":"Returns mempool data for given transaction","title":"getmempoolentry"},{"location":"flightplans/avian-library/blockchain/getmempoolentry/#arguments","text":"\"txid\" (string, required) The transaction id (must be in mempool)","title":"Arguments:"},{"location":"flightplans/avian-library/blockchain/getmempoolentry/#result","text":"{ (json object) \"size\" : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted. \"fee\" : n, (numeric) transaction fee in AVN \"modifiedfee\" : n, (numeric) transaction fee with fee deltas used for mining priority \"time\" : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT \"height\" : n, (numeric) block height when transaction entered pool \"descendantcount\" : n, (numeric) number of in-mempool descendant transactions (including this one) \"descendantsize\" : n, (numeric) virtual transaction size of in-mempool descendants (including this one) \"descendantfees\" : n, (numeric) modified fees (see above) of in-mempool descendants (including this one) \"ancestorcount\" : n, (numeric) number of in-mempool ancestor transactions (including this one) \"ancestorsize\" : n, (numeric) virtual transaction size of in-mempool ancestors (including this one) \"ancestorfees\" : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one) \"wtxid\" : hash, (string) hash of serialized transaction, including witness data \"depends\" : [ (array) unconfirmed transactions used as inputs for this transaction \"transactionid\", (string) parent transaction id ... ] }","title":"Result:"},{"location":"flightplans/avian-library/blockchain/getmempoolentry/#examples","text":"avian-cli getmempoolentry \"mytxid\"","title":"Examples:"},{"location":"flightplans/avian-library/blockchain/getmempoolinfo/","text":"getmempoolinfo Returns details on the active state of the TX memory pool. Result: { \"size\": xxxxx, (numeric) Current tx count \"bytes\": xxxxx, (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted \"usage\": xxxxx, (numeric) Total memory usage for the mempool \"maxmempool\": xxxxx, (numeric) Maximum memory usage for the mempool \"mempoolminfee\": xxxxx (numeric) Minimum fee rate in AVN/kB for tx to be accepted } Examples: avian-cli getmempoolinfo","title":"getmempoolinfo"},{"location":"flightplans/avian-library/blockchain/getmempoolinfo/#getmempoolinfo","text":"Returns details on the active state of the TX memory pool.","title":"getmempoolinfo"},{"location":"flightplans/avian-library/blockchain/getmempoolinfo/#result","text":"{ \"size\": xxxxx, (numeric) Current tx count \"bytes\": xxxxx, (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted \"usage\": xxxxx, (numeric) Total memory usage for the mempool \"maxmempool\": xxxxx, (numeric) Maximum memory usage for the mempool \"mempoolminfee\": xxxxx (numeric) Minimum fee rate in AVN/kB for tx to be accepted }","title":"Result:"},{"location":"flightplans/avian-library/blockchain/getmempoolinfo/#examples","text":"avian-cli getmempoolinfo","title":"Examples:"},{"location":"flightplans/avian-library/blockchain/getrawmempool/","text":"getrawmempool Returns all transaction ids in memory pool as a json array of string transaction ids. Hint: use getmempoolentry to fetch a specific transaction from the mempool. Arguments: verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids Result: (for verbose = false): [ (json array of string) \"transactionid\" (string) The transaction id ,... ] Result: (for verbose = true): { (json object) \"transactionid\" : { (json object) \"size\" : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted. \"fee\" : n, (numeric) transaction fee in AVN \"modifiedfee\" : n, (numeric) transaction fee with fee deltas used for mining priority \"time\" : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT \"height\" : n, (numeric) block height when transaction entered pool \"descendantcount\" : n, (numeric) number of in-mempool descendant transactions (including this one) \"descendantsize\" : n, (numeric) virtual transaction size of in-mempool descendants (including this one) \"descendantfees\" : n, (numeric) modified fees (see above) of in-mempool descendants (including this one) \"ancestorcount\" : n, (numeric) number of in-mempool ancestor transactions (including this one) \"ancestorsize\" : n, (numeric) virtual transaction size of in-mempool ancestors (including this one) \"ancestorfees\" : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one) \"wtxid\" : hash, (string) hash of serialized transaction, including witness data \"depends\" : [ (array) unconfirmed transactions used as inputs for this transaction \"transactionid\", (string) parent transaction id ... ] }, ... } Examples: avian-cli getrawmempool true","title":"getrawmempool"},{"location":"flightplans/avian-library/blockchain/getrawmempool/#getrawmempool","text":"Returns all transaction ids in memory pool as a json array of string transaction ids. Hint: use getmempoolentry to fetch a specific transaction from the mempool.","title":"getrawmempool"},{"location":"flightplans/avian-library/blockchain/getrawmempool/#arguments","text":"verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids","title":"Arguments:"},{"location":"flightplans/avian-library/blockchain/getrawmempool/#result-for-verbose-false","text":"[ (json array of string) \"transactionid\" (string) The transaction id ,... ]","title":"Result: (for verbose = false):"},{"location":"flightplans/avian-library/blockchain/getrawmempool/#result-for-verbose-true","text":"{ (json object) \"transactionid\" : { (json object) \"size\" : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted. \"fee\" : n, (numeric) transaction fee in AVN \"modifiedfee\" : n, (numeric) transaction fee with fee deltas used for mining priority \"time\" : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT \"height\" : n, (numeric) block height when transaction entered pool \"descendantcount\" : n, (numeric) number of in-mempool descendant transactions (including this one) \"descendantsize\" : n, (numeric) virtual transaction size of in-mempool descendants (including this one) \"descendantfees\" : n, (numeric) modified fees (see above) of in-mempool descendants (including this one) \"ancestorcount\" : n, (numeric) number of in-mempool ancestor transactions (including this one) \"ancestorsize\" : n, (numeric) virtual transaction size of in-mempool ancestors (including this one) \"ancestorfees\" : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one) \"wtxid\" : hash, (string) hash of serialized transaction, including witness data \"depends\" : [ (array) unconfirmed transactions used as inputs for this transaction \"transactionid\", (string) parent transaction id ... ] }, ... }","title":"Result: (for verbose = true):"},{"location":"flightplans/avian-library/blockchain/getrawmempool/#examples","text":"avian-cli getrawmempool true","title":"Examples:"},{"location":"flightplans/avian-library/blockchain/getspentinfo/","text":"getspentinfo Returns the txid and index where an output is spent. Arguments: { \"txid\" (string) The hex string of the txid \"index\" (number) The start block height } Result: { \"txid\" (string) The transaction id \"index\" (number) The spending input index ,... } Examples: avian-cli getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}'","title":"getspentinfo"},{"location":"flightplans/avian-library/blockchain/getspentinfo/#getspentinfo","text":"Returns the txid and index where an output is spent.","title":"getspentinfo"},{"location":"flightplans/avian-library/blockchain/getspentinfo/#arguments","text":"{ \"txid\" (string) The hex string of the txid \"index\" (number) The start block height }","title":"Arguments:"},{"location":"flightplans/avian-library/blockchain/getspentinfo/#result","text":"{ \"txid\" (string) The transaction id \"index\" (number) The spending input index ,... }","title":"Result:"},{"location":"flightplans/avian-library/blockchain/getspentinfo/#examples","text":"avian-cli getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}'","title":"Examples:"},{"location":"flightplans/avian-library/blockchain/gettxout/","text":"gettxout gettxout \"txid\" n ( include_mempool ) Returns details about an unspent transaction output. Arguments: \"txid\" (string, required) The transaction id \"n\" (numeric, required) vout number \"include_mempool\" (boolean, optional) Whether to include the mempool. Default: true. Note that an unspent output that is spent in the mempool won't appear. Result: { \"bestblock\" : \"hash\", (string) the block hash \"confirmations\" : n, (numeric) The number of confirmations \"value\" : x.xxx, (numeric) The transaction value in AVN \"scriptPubKey\" : { (json object) \"asm\" : \"code\", (string) \"hex\" : \"hex\", (string) \"reqSigs\" : n, (numeric) Number of required signatures \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash \"addresses\" : [ (array of string) array of avian addresses \"address\" (string) avian address ,... ] }, \"coinbase\" : true|false (boolean) Coinbase or not } Examples: Get unspent transactions avian-cli listunspent View the details avian-cli gettxout \"txid\" 1 As a json rpc call curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"gettxout"},{"location":"flightplans/avian-library/blockchain/gettxout/#gettxout","text":"gettxout \"txid\" n ( include_mempool ) Returns details about an unspent transaction output.","title":"gettxout"},{"location":"flightplans/avian-library/blockchain/gettxout/#arguments","text":"\"txid\" (string, required) The transaction id \"n\" (numeric, required) vout number \"include_mempool\" (boolean, optional) Whether to include the mempool. Default: true. Note that an unspent output that is spent in the mempool won't appear.","title":"Arguments:"},{"location":"flightplans/avian-library/blockchain/gettxout/#result","text":"{ \"bestblock\" : \"hash\", (string) the block hash \"confirmations\" : n, (numeric) The number of confirmations \"value\" : x.xxx, (numeric) The transaction value in AVN \"scriptPubKey\" : { (json object) \"asm\" : \"code\", (string) \"hex\" : \"hex\", (string) \"reqSigs\" : n, (numeric) Number of required signatures \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash \"addresses\" : [ (array of string) array of avian addresses \"address\" (string) avian address ,... ] }, \"coinbase\" : true|false (boolean) Coinbase or not }","title":"Result:"},{"location":"flightplans/avian-library/blockchain/gettxout/#examples","text":"","title":"Examples:"},{"location":"flightplans/avian-library/blockchain/gettxout/#get-unspent-transactions","text":"avian-cli listunspent","title":"Get unspent transactions"},{"location":"flightplans/avian-library/blockchain/gettxout/#view-the-details","text":"avian-cli gettxout \"txid\" 1","title":"View the details"},{"location":"flightplans/avian-library/blockchain/gettxout/#as-a-json-rpc-call","text":"curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"As a json rpc call"},{"location":"flightplans/avian-library/blockchain/gettxoutproof/","text":"gettxoutproof Returns a hex-encoded proof that \"txid\" was included in a block. Note NOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included manually (by blockhash). Arguments: \"txids\" (string) A json array of txids to filter [ \"txid\" (string) A transaction hash ,... ] \"blockhash\" (string, optional) If specified, looks for txid in the block with this hash Result: \"data\" (string) A string that is a serialized, hex-encoded data for the proof.","title":"gettxoutproof"},{"location":"flightplans/avian-library/blockchain/gettxoutproof/#gettxoutproof","text":"Returns a hex-encoded proof that \"txid\" was included in a block. Note NOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included manually (by blockhash).","title":"gettxoutproof"},{"location":"flightplans/avian-library/blockchain/gettxoutproof/#arguments","text":"\"txids\" (string) A json array of txids to filter [ \"txid\" (string) A transaction hash ,... ] \"blockhash\" (string, optional) If specified, looks for txid in the block with this hash","title":"Arguments:"},{"location":"flightplans/avian-library/blockchain/gettxoutproof/#result","text":"\"data\" (string) A string that is a serialized, hex-encoded data for the proof.","title":"Result:"},{"location":"flightplans/avian-library/blockchain/gettxoutsetinfo/","text":"gettxoutsetinfo Returns statistics about the unspent transaction output set. Note Note this call may take some time. Result: { \"height\":n, (numeric) The current block height (index) \"bestblock\": \"hex\", (string) the best block hash hex \"transactions\": n, (numeric) The number of transactions \"txouts\": n, (numeric) The number of output transactions \"bogosize\": n, (numeric) A meaningless metric for UTXO set size \"hash_serialized_2\": \"hash\", (string) The serialized hash \"disk_size\": n, (numeric) The estimated size of the chainstate on disk \"total_amount\": x.xxx (numeric) The total amount } Examples: avian-cli gettxoutsetinfo","title":"gettxoutsetinfo"},{"location":"flightplans/avian-library/blockchain/gettxoutsetinfo/#gettxoutsetinfo","text":"Returns statistics about the unspent transaction output set. Note Note this call may take some time.","title":"gettxoutsetinfo"},{"location":"flightplans/avian-library/blockchain/gettxoutsetinfo/#result","text":"{ \"height\":n, (numeric) The current block height (index) \"bestblock\": \"hex\", (string) the best block hash hex \"transactions\": n, (numeric) The number of transactions \"txouts\": n, (numeric) The number of output transactions \"bogosize\": n, (numeric) A meaningless metric for UTXO set size \"hash_serialized_2\": \"hash\", (string) The serialized hash \"disk_size\": n, (numeric) The estimated size of the chainstate on disk \"total_amount\": x.xxx (numeric) The total amount }","title":"Result:"},{"location":"flightplans/avian-library/blockchain/gettxoutsetinfo/#examples","text":"avian-cli gettxoutsetinfo","title":"Examples:"},{"location":"flightplans/avian-library/local-wallet/abandontransaction/","text":"abandontransaction","title":"abandontransaction"},{"location":"flightplans/avian-library/local-wallet/abandontransaction/#abandontransaction","text":"","title":"abandontransaction"},{"location":"flightplans/avian-library/local-wallet/addmultisigaddress/","text":"addmultisigaddress","title":"addmultisigaddress"},{"location":"flightplans/avian-library/local-wallet/addmultisigaddress/#addmultisigaddress","text":"","title":"addmultisigaddress"},{"location":"flightplans/avian-library/local-wallet/addwitnessaddress/","text":"addwitnessaddress","title":"addwitnessaddress"},{"location":"flightplans/avian-library/local-wallet/addwitnessaddress/#addwitnessaddress","text":"","title":"addwitnessaddress"},{"location":"flightplans/avian-library/local-wallet/getaccount/","text":"getaccount","title":"getaccount"},{"location":"flightplans/avian-library/local-wallet/getaccount/#getaccount","text":"","title":"getaccount"},{"location":"flightplans/avian-library/local-wallet/getaccountaddress/","text":"getaccountaddress","title":"getaccountaddress"},{"location":"flightplans/avian-library/local-wallet/getaccountaddress/#getaccountaddress","text":"","title":"getaccountaddress"},{"location":"flightplans/avian-library/local-wallet/getaddressesbyaccount/","text":"getaddressesbyaccount","title":"getaddressesbyaccount"},{"location":"flightplans/avian-library/local-wallet/getaddressesbyaccount/#getaddressesbyaccount","text":"","title":"getaddressesbyaccount"},{"location":"flightplans/avian-library/local-wallet/getbalance/","text":"getbalance","title":"getbalance"},{"location":"flightplans/avian-library/local-wallet/getbalance/#getbalance","text":"","title":"getbalance"},{"location":"flightplans/avian-library/local-wallet/getnewaddress/","text":"getnewaddress","title":"getnewaddress"},{"location":"flightplans/avian-library/local-wallet/getnewaddress/#getnewaddress","text":"","title":"getnewaddress"},{"location":"flightplans/avian-library/local-wallet/getrawchangeaddress/","text":"getrawchangeaddress","title":"getrawchangeaddress"},{"location":"flightplans/avian-library/local-wallet/getrawchangeaddress/#getrawchangeaddress","text":"","title":"getrawchangeaddress"},{"location":"flightplans/avian-library/local-wallet/getreceivedbyaccount/","text":"getreceivedbyaccount","title":"getreceivedbyaccount"},{"location":"flightplans/avian-library/local-wallet/getreceivedbyaccount/#getreceivedbyaccount","text":"","title":"getreceivedbyaccount"},{"location":"flightplans/avian-library/local-wallet/getreceivedbyaddress/","text":"getreceivedbyaddress","title":"getreceivedbyaddress"},{"location":"flightplans/avian-library/local-wallet/getreceivedbyaddress/#getreceivedbyaddress","text":"","title":"getreceivedbyaddress"},{"location":"flightplans/avian-library/local-wallet/gettransaction/","text":"gettransaction","title":"gettransaction"},{"location":"flightplans/avian-library/local-wallet/gettransaction/#gettransaction","text":"","title":"gettransaction"},{"location":"flightplans/avian-library/local-wallet/getunconfirmedbalance/","text":"getunconfirmedbalance","title":"getunconfirmedbalance"},{"location":"flightplans/avian-library/local-wallet/getunconfirmedbalance/#getunconfirmedbalance","text":"","title":"getunconfirmedbalance"},{"location":"flightplans/avian-library/local-wallet/keypoolrefill/","text":"keypoolrefill","title":"keypoolrefill"},{"location":"flightplans/avian-library/local-wallet/keypoolrefill/#keypoolrefill","text":"","title":"keypoolrefill"},{"location":"flightplans/avian-library/local-wallet/listaccounts/","text":"listaccounts","title":"listaccounts"},{"location":"flightplans/avian-library/local-wallet/listaccounts/#listaccounts","text":"","title":"listaccounts"},{"location":"flightplans/avian-library/local-wallet/listaddressgroupings/","text":"listaddressgroupings","title":"listaddressgroupings"},{"location":"flightplans/avian-library/local-wallet/listaddressgroupings/#listaddressgroupings","text":"","title":"listaddressgroupings"},{"location":"flightplans/avian-library/local-wallet/listlockunspent/","text":"listlockunspent","title":"listlockunspent"},{"location":"flightplans/avian-library/local-wallet/listlockunspent/#listlockunspent","text":"","title":"listlockunspent"},{"location":"flightplans/avian-library/local-wallet/listreceivedbyaccount/","text":"listreceivedbyaccount","title":"listreceivedbyaccount"},{"location":"flightplans/avian-library/local-wallet/listreceivedbyaccount/#listreceivedbyaccount","text":"","title":"listreceivedbyaccount"},{"location":"flightplans/avian-library/local-wallet/listreceivedbyaddress/","text":"listreceivedbyaddress","title":"listreceivedbyaddress"},{"location":"flightplans/avian-library/local-wallet/listreceivedbyaddress/#listreceivedbyaddress","text":"","title":"listreceivedbyaddress"},{"location":"flightplans/avian-library/local-wallet/listsinceblock/","text":"listsinceblock","title":"listsinceblock"},{"location":"flightplans/avian-library/local-wallet/listsinceblock/#listsinceblock","text":"","title":"listsinceblock"},{"location":"flightplans/avian-library/local-wallet/listtransactions/","text":"listtransactions","title":"listtransactions"},{"location":"flightplans/avian-library/local-wallet/listtransactions/#listtransactions","text":"","title":"listtransactions"},{"location":"flightplans/avian-library/local-wallet/listunspent/","text":"listunspent","title":"listunspent"},{"location":"flightplans/avian-library/local-wallet/listunspent/#listunspent","text":"","title":"listunspent"},{"location":"flightplans/avian-library/local-wallet/lockunspent/","text":"lockunspent","title":"lockunspent"},{"location":"flightplans/avian-library/local-wallet/lockunspent/#lockunspent","text":"","title":"lockunspent"},{"location":"flightplans/avian-library/local-wallet/move/","text":"move","title":"move"},{"location":"flightplans/avian-library/local-wallet/move/#move","text":"","title":"move"},{"location":"flightplans/avian-library/local-wallet/removeprunedfunds/","text":"removeprunedfunds","title":"removeprunedfunds"},{"location":"flightplans/avian-library/local-wallet/removeprunedfunds/#removeprunedfunds","text":"","title":"removeprunedfunds"},{"location":"flightplans/avian-library/local-wallet/sendfrom/","text":"sendfrom","title":"sendfrom"},{"location":"flightplans/avian-library/local-wallet/sendfrom/#sendfrom","text":"","title":"sendfrom"},{"location":"flightplans/avian-library/local-wallet/sendfromaddress/","text":"sendfromaddress","title":"sendfromaddress"},{"location":"flightplans/avian-library/local-wallet/sendfromaddress/#sendfromaddress","text":"","title":"sendfromaddress"},{"location":"flightplans/avian-library/local-wallet/sendmany/","text":"sendmany","title":"sendmany"},{"location":"flightplans/avian-library/local-wallet/sendmany/#sendmany","text":"","title":"sendmany"},{"location":"flightplans/avian-library/local-wallet/sendtoaddress/","text":"sendtoaddress","title":"sendtoaddress"},{"location":"flightplans/avian-library/local-wallet/sendtoaddress/#sendtoaddress","text":"","title":"sendtoaddress"},{"location":"flightplans/avian-library/local-wallet/setaccount/","text":"setaccount","title":"setaccount"},{"location":"flightplans/avian-library/local-wallet/setaccount/#setaccount","text":"","title":"setaccount"},{"location":"flightplans/avian-library/local-wallet/settxfee/","text":"settxfee","title":"settxfee"},{"location":"flightplans/avian-library/local-wallet/settxfee/#settxfee","text":"","title":"settxfee"},{"location":"flightplans/avian-library/local-wallet/signmessage/","text":"signmessage","title":"signmessage"},{"location":"flightplans/avian-library/local-wallet/signmessage/#signmessage","text":"","title":"signmessage"},{"location":"flightplans/avian-library/main/createmultisig/","text":"createmultisig createmultisig nrequired [\"key\",...] Creates a multi-signature address with n signature of m keys required. It returns a json object with the address and redeemScript. Arguments: nrequired (numeric, required) The number of required signatures out of the n keys or addresses. \"keys\" (string, required) A json array of keys which are avian addresses or hex-encoded public keys [ \"key\" (s tr i n g) avia n address or hex -e n coded public key , ... ] Result: { \"address\" : \"multisigaddress\" , (s tr i n g) The value o f t he ne w mul t isig address. \"redeemScript\" : \"script\" (s tr i n g) The s tr i n g value o f t he hex -e n coded redemp t io n scrip t . } Examples: Create a multisig address from 2 addresses avian-cli createmultisig 2 \"[\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\",\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\"]\" As a json rpc call curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\",\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"createmultisig"},{"location":"flightplans/avian-library/main/createmultisig/#createmultisig","text":"createmultisig nrequired [\"key\",...] Creates a multi-signature address with n signature of m keys required. It returns a json object with the address and redeemScript.","title":"createmultisig"},{"location":"flightplans/avian-library/main/createmultisig/#arguments","text":"nrequired (numeric, required) The number of required signatures out of the n keys or addresses. \"keys\" (string, required) A json array of keys which are avian addresses or hex-encoded public keys [ \"key\" (s tr i n g) avia n address or hex -e n coded public key , ... ]","title":"Arguments:"},{"location":"flightplans/avian-library/main/createmultisig/#result","text":"{ \"address\" : \"multisigaddress\" , (s tr i n g) The value o f t he ne w mul t isig address. \"redeemScript\" : \"script\" (s tr i n g) The s tr i n g value o f t he hex -e n coded redemp t io n scrip t . }","title":"Result:"},{"location":"flightplans/avian-library/main/createmultisig/#examples","text":"Create a multisig address from 2 addresses avian-cli createmultisig 2 \"[\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\",\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\"]\" As a json rpc call curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\",\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"Examples:"},{"location":"flightplans/avian-library/main/estimatefee/","text":"estimatefee Warning DEPRECATED . Please use estimatesmartfee \u2197 for more intelligent estimates. Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks. Uses virtual transaction size of transaction as defined in BIP 141 (witness data is discounted). Arguments: nblocks (numeric, required) Result: n (numeric) estimated fee-per-kilobyte A negative value is returned if not enough transactions and blocks have been observed to make an estimate. -1 is always returned for nblocks == 1 as it is impossible to calculate a fee that is high enough to get reliably included in the next block. Example: avian-cli estimatefee 6","title":"estimatefee"},{"location":"flightplans/avian-library/main/estimatefee/#estimatefee","text":"Warning DEPRECATED . Please use estimatesmartfee \u2197 for more intelligent estimates. Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks. Uses virtual transaction size of transaction as defined in BIP 141 (witness data is discounted). Arguments: nblocks (numeric, required) Result: n (numeric) estimated fee-per-kilobyte A negative value is returned if not enough transactions and blocks have been observed to make an estimate. -1 is always returned for nblocks == 1 as it is impossible to calculate a fee that is high enough to get reliably included in the next block. Example: avian-cli estimatefee 6","title":"estimatefee"},{"location":"flightplans/avian-library/main/estimatesmartfee/","text":"estimatesmartfee estimatesmartfee conf_target (\"estimate_mode\") Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within conf_target blocks if possible and return the number of blocks for which the estimate is valid. Uses virtual transaction size as defined in BIP 141 (witness data is discounted). Arguments: 1. conf_target (numeric) Confirmation target in blocks (1 - 1008) 2. \"estimate_mode\" (string, optional, default=CONSERVATIVE) The fee estimate mode. Whether to return a more conservative estimate which also satisfies a longer history. A conservative estimate potentially returns a higher feerate and is more likely to be sufficient for the desired target, but is not as responsive to short term drops in the prevailing fee market. Must be one of: \"UNSET\" (defaults to CONSERVATIVE) \"ECONOMICAL\" \"CONSERVATIVE\" Result: { \"feerate\" : x.x , ( nu meric , op t io nal ) es t ima te fee ra te i n AVN/kB \"errors\" : [ s tr ... ] (jso n array o f s tr i n gs , op t io nal ) Errors e n cou ntere d duri n g processi n g \"blocks\" : n ( nu meric) block nu mber where es t ima te was f ou n d } The request target will be clamped between 2 and the highest target fee estimation is able to return based on how long it has been running. An error is returned if not enough transactions and blocks have been observed to make an estimate for any number of blocks. Example: avian-cli estimatesmartfee 6","title":"estimatesmartfee"},{"location":"flightplans/avian-library/main/estimatesmartfee/#estimatesmartfee","text":"estimatesmartfee conf_target (\"estimate_mode\") Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within conf_target blocks if possible and return the number of blocks for which the estimate is valid. Uses virtual transaction size as defined in BIP 141 (witness data is discounted).","title":"estimatesmartfee"},{"location":"flightplans/avian-library/main/estimatesmartfee/#arguments","text":"1. conf_target (numeric) Confirmation target in blocks (1 - 1008) 2. \"estimate_mode\" (string, optional, default=CONSERVATIVE) The fee estimate mode. Whether to return a more conservative estimate which also satisfies a longer history. A conservative estimate potentially returns a higher feerate and is more likely to be sufficient for the desired target, but is not as responsive to short term drops in the prevailing fee market. Must be one of: \"UNSET\" (defaults to CONSERVATIVE) \"ECONOMICAL\" \"CONSERVATIVE\"","title":"Arguments:"},{"location":"flightplans/avian-library/main/estimatesmartfee/#result","text":"{ \"feerate\" : x.x , ( nu meric , op t io nal ) es t ima te fee ra te i n AVN/kB \"errors\" : [ s tr ... ] (jso n array o f s tr i n gs , op t io nal ) Errors e n cou ntere d duri n g processi n g \"blocks\" : n ( nu meric) block nu mber where es t ima te was f ou n d } The request target will be clamped between 2 and the highest target fee estimation is able to return based on how long it has been running. An error is returned if not enough transactions and blocks have been observed to make an estimate for any number of blocks.","title":"Result:"},{"location":"flightplans/avian-library/main/estimatesmartfee/#example","text":"avian-cli estimatesmartfee 6","title":"Example:"},{"location":"flightplans/avian-library/main/getinfo/","text":"getinfo Warning DEPRECATED. Returns an object containing various state info. Result: { \"deprecation-warning\" : \"...\" (s tr i n g) war n i n g t ha t t he ge t i nf o comma n d is depreca te d a n d will be removed i n 0.16 \"version\" : xxxxx , ( nu meric) t he server versio n \"protocolversion\" : xxxxx , ( nu meric) t he pro t ocol versio n \"walletversion\" : xxxxx , ( nu meric) t he walle t versio n \"balance\" : xxxxxxx , ( nu meric) t he t o tal Avia n coi n bala n ce o f t he walle t \"blocks\" : xxxxxx , ( nu meric) t he curre nt nu mber o f blocks processed i n t he server \"timeoffset\" : xxxxx , ( nu meric) t he t ime o ffset \"connections\" : xxxxx , ( nu meric) t he nu mber o f co nne c t io ns \"proxy\" : \"host:port\" , (s tr i n g , op t io nal ) t he proxy used by t he server \"difficulty\" : xxxxxx , ( nu meric) t he curre nt di ff icul t y \"testnet\" : true | false , (boolea n ) i f t he server is usi n g testnet or n o t \"keypoololdest\" : xxxxxx , ( nu meric) t he t imes ta mp (seco n ds si n ce U n ix epoch) o f t he oldes t pre - ge nerate d key i n t he key pool \"keypoolsize\" : xxxx , ( nu meric) how ma n y ne w keys are pre - ge nerate d \"unlocked_until\" : ttt , ( nu meric) t he t imes ta mp i n seco n ds si n ce epoch (mid n igh t Ja n 1 1970 GMT) t ha t t he walle t is u nl ocked f or transfers , or 0 i f t he walle t is locked \"paytxfee\" : x.xxxx , ( nu meric) t he transa c t io n fee se t i n AVN/kB \"relayfee\" : x.xxxx , ( nu meric) mi n imum relay fee f or transa c t io ns i n AVN/kB \"errors\" : \"...\" (s tr i n g) a n y error messages } Examples: avian-cli getinfo","title":"getinfo"},{"location":"flightplans/avian-library/main/getinfo/#getinfo","text":"Warning DEPRECATED. Returns an object containing various state info.","title":"getinfo"},{"location":"flightplans/avian-library/main/getinfo/#result","text":"{ \"deprecation-warning\" : \"...\" (s tr i n g) war n i n g t ha t t he ge t i nf o comma n d is depreca te d a n d will be removed i n 0.16 \"version\" : xxxxx , ( nu meric) t he server versio n \"protocolversion\" : xxxxx , ( nu meric) t he pro t ocol versio n \"walletversion\" : xxxxx , ( nu meric) t he walle t versio n \"balance\" : xxxxxxx , ( nu meric) t he t o tal Avia n coi n bala n ce o f t he walle t \"blocks\" : xxxxxx , ( nu meric) t he curre nt nu mber o f blocks processed i n t he server \"timeoffset\" : xxxxx , ( nu meric) t he t ime o ffset \"connections\" : xxxxx , ( nu meric) t he nu mber o f co nne c t io ns \"proxy\" : \"host:port\" , (s tr i n g , op t io nal ) t he proxy used by t he server \"difficulty\" : xxxxxx , ( nu meric) t he curre nt di ff icul t y \"testnet\" : true | false , (boolea n ) i f t he server is usi n g testnet or n o t \"keypoololdest\" : xxxxxx , ( nu meric) t he t imes ta mp (seco n ds si n ce U n ix epoch) o f t he oldes t pre - ge nerate d key i n t he key pool \"keypoolsize\" : xxxx , ( nu meric) how ma n y ne w keys are pre - ge nerate d \"unlocked_until\" : ttt , ( nu meric) t he t imes ta mp i n seco n ds si n ce epoch (mid n igh t Ja n 1 1970 GMT) t ha t t he walle t is u nl ocked f or transfers , or 0 i f t he walle t is locked \"paytxfee\" : x.xxxx , ( nu meric) t he transa c t io n fee se t i n AVN/kB \"relayfee\" : x.xxxx , ( nu meric) mi n imum relay fee f or transa c t io ns i n AVN/kB \"errors\" : \"...\" (s tr i n g) a n y error messages }","title":"Result:"},{"location":"flightplans/avian-library/main/getinfo/#examples","text":"avian-cli getinfo","title":"Examples:"},{"location":"flightplans/avian-library/main/signmessagewithprivkey/","text":"signmessagewithprivkey Sign a message with the private key of an address Arguments: 1. \"privkey\" (string, required) The private key to sign the message with. 2. \"message\" (string, required) The message to create a signature of. Result: \"signature\" (string) The signature of the message encoded in base 64 Examples: Create the signature avian-cli signmessagewithprivkey \"privkey\" \"my message\" Verify the signature avian-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\" As json rpc curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"signmessagewithprivkey"},{"location":"flightplans/avian-library/main/signmessagewithprivkey/#signmessagewithprivkey","text":"Sign a message with the private key of an address","title":"signmessagewithprivkey"},{"location":"flightplans/avian-library/main/signmessagewithprivkey/#arguments","text":"1. \"privkey\" (string, required) The private key to sign the message with. 2. \"message\" (string, required) The message to create a signature of.","title":"Arguments:"},{"location":"flightplans/avian-library/main/signmessagewithprivkey/#result","text":"\"signature\" (string) The signature of the message encoded in base 64","title":"Result:"},{"location":"flightplans/avian-library/main/signmessagewithprivkey/#examples","text":"Create the signature avian-cli signmessagewithprivkey \"privkey\" \"my message\" Verify the signature avian-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\" As json rpc curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"Examples:"},{"location":"flightplans/avian-library/main/validateaddress/","text":"validateaddress Return information about the given avian address. Arguments: \"address\" (string, required) The avian address to validate Result: { \"isvalid\" : true | false , (boolea n ) I f t he address is valid or n o t . I f n o t , t his is t he o nl y proper t y re turne d. \"address\" : \"address\" , (s tr i n g) The avia n address valida te d \"scriptPubKey\" : \"hex\" , (s tr i n g) The hex e n coded scrip t PubKey ge nerate d by t he address \"ismine\" : true | false , (boolea n ) I f t he address is yours or n o t \"iswatchonly\" : true | false , (boolea n ) I f t he address is wa t cho nl y \"isscript\" : true | false , (boolea n ) I f t he key is a scrip t \"script\" : \"type\" (s tr i n g , op t io nal ) The ou t pu t scrip t t ype. Possible t ypes : n o nstan dard , pubkey , pubkeyhash , scrip t hash , mul t isig , null da ta , wi tness _v 0 _keyhash , wi tness _v 0 _scrip t hash \"hex\" : \"hex\" , (s tr i n g , op t io nal ) The redeemscrip t f or t he p 2 sh address \"addresses\" (s tr i n g , op t io nal ) Array o f addresses associa te d wi t h t he k n ow n redeemscrip t [ \"address\" , ... ] \"sigsrequired\" : xxxxx ( nu meric , op t io nal ) Number o f sig natures required t o spe n d mul t isig ou t pu t \"pubkey\" : \"publickeyhex\" , (s tr i n g) The hex value o f t he raw public key \"iscompressed\" : true | false , (boolea n ) I f t he address is compressed \"account\" : \"account\" (s tr i n g) DEPRECATED. The accou nt associa te d wi t h t he address , \"\" is t he de fault accou nt \"timestamp\" : t imes ta mp , ( nu mber , op t io nal ) The crea t io n t ime o f t he key i f available i n seco n ds si n ce epoch (Ja n 1 1970 GMT) \"hdkeypath\" : \"keypath\" (s tr i n g , op t io nal ) The HD keypa t h i f t he key is HD a n d available \"hdmasterkeyid\" : \"<hash160>\" (s tr i n g , op t io nal ) The Hash 160 o f t he HD mas ter pubkey } Examples: avian-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"","title":"validateaddress"},{"location":"flightplans/avian-library/main/validateaddress/#validateaddress","text":"Return information about the given avian address.","title":"validateaddress"},{"location":"flightplans/avian-library/main/validateaddress/#arguments","text":"\"address\" (string, required) The avian address to validate","title":"Arguments:"},{"location":"flightplans/avian-library/main/validateaddress/#result","text":"{ \"isvalid\" : true | false , (boolea n ) I f t he address is valid or n o t . I f n o t , t his is t he o nl y proper t y re turne d. \"address\" : \"address\" , (s tr i n g) The avia n address valida te d \"scriptPubKey\" : \"hex\" , (s tr i n g) The hex e n coded scrip t PubKey ge nerate d by t he address \"ismine\" : true | false , (boolea n ) I f t he address is yours or n o t \"iswatchonly\" : true | false , (boolea n ) I f t he address is wa t cho nl y \"isscript\" : true | false , (boolea n ) I f t he key is a scrip t \"script\" : \"type\" (s tr i n g , op t io nal ) The ou t pu t scrip t t ype. Possible t ypes : n o nstan dard , pubkey , pubkeyhash , scrip t hash , mul t isig , null da ta , wi tness _v 0 _keyhash , wi tness _v 0 _scrip t hash \"hex\" : \"hex\" , (s tr i n g , op t io nal ) The redeemscrip t f or t he p 2 sh address \"addresses\" (s tr i n g , op t io nal ) Array o f addresses associa te d wi t h t he k n ow n redeemscrip t [ \"address\" , ... ] \"sigsrequired\" : xxxxx ( nu meric , op t io nal ) Number o f sig natures required t o spe n d mul t isig ou t pu t \"pubkey\" : \"publickeyhex\" , (s tr i n g) The hex value o f t he raw public key \"iscompressed\" : true | false , (boolea n ) I f t he address is compressed \"account\" : \"account\" (s tr i n g) DEPRECATED. The accou nt associa te d wi t h t he address , \"\" is t he de fault accou nt \"timestamp\" : t imes ta mp , ( nu mber , op t io nal ) The crea t io n t ime o f t he key i f available i n seco n ds si n ce epoch (Ja n 1 1970 GMT) \"hdkeypath\" : \"keypath\" (s tr i n g , op t io nal ) The HD keypa t h i f t he key is HD a n d available \"hdmasterkeyid\" : \"<hash160>\" (s tr i n g , op t io nal ) The Hash 160 o f t he HD mas ter pubkey }","title":"Result:"},{"location":"flightplans/avian-library/main/validateaddress/#examples","text":"avian-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"","title":"Examples:"},{"location":"flightplans/avian-library/messages/clearmessages/","text":"clearmessages Delete current database of messages","title":"clearmessages"},{"location":"flightplans/avian-library/messages/clearmessages/#clearmessages","text":"Delete current database of messages","title":"clearmessages"},{"location":"flightplans/avian-library/messages/sendmessage/","text":"sendmessage Creates and broadcasts a message transaction to the network for a channel this wallet owns Arguments: 1. \"channel_name\" (string, required) Name of the channel that you want to send a message with (message channel, administrator asset), if a non administrator asset name is given, the administrator '!' will be added to it 2. \"ipfs_hash\" (string, required) The IPFS hash of the message 3. \"expire_time\" (numeric, optional) UTC timestamp of when the message expires Result [ t xid ] Examples: avian-cli sendmessage \"ASSET_NAME!\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 15863654 avian-cli sendmessage \"ASSET_NAME!\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 15863654","title":"sendmessage"},{"location":"flightplans/avian-library/messages/sendmessage/#sendmessage","text":"Creates and broadcasts a message transaction to the network for a channel this wallet owns","title":"sendmessage"},{"location":"flightplans/avian-library/messages/sendmessage/#arguments","text":"1. \"channel_name\" (string, required) Name of the channel that you want to send a message with (message channel, administrator asset), if a non administrator asset name is given, the administrator '!' will be added to it 2. \"ipfs_hash\" (string, required) The IPFS hash of the message 3. \"expire_time\" (numeric, optional) UTC timestamp of when the message expires","title":"Arguments:"},{"location":"flightplans/avian-library/messages/sendmessage/#result","text":"[ t xid ]","title":"Result"},{"location":"flightplans/avian-library/messages/sendmessage/#examples","text":"avian-cli sendmessage \"ASSET_NAME!\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 15863654 avian-cli sendmessage \"ASSET_NAME!\" \"QmTqu3Lk3gmTsQVtjU7rYYM37EAW4xNmbuEAp2Mjr4AV7E\" 15863654","title":"Examples:"},{"location":"flightplans/avian-library/messages/subscribetochannel/","text":"subscribetochannel Subscribe to a certain message channel Arguments: 1. \"channel_name\" (string, required) The channel name to subscribe to, it must end with '!' or have an '~' in the name Examples: avian-cli subscribetochannel \"ASSET_NAME!\"","title":"subscribetochannel"},{"location":"flightplans/avian-library/messages/subscribetochannel/#subscribetochannel","text":"Subscribe to a certain message channel","title":"subscribetochannel"},{"location":"flightplans/avian-library/messages/subscribetochannel/#arguments","text":"1. \"channel_name\" (string, required) The channel name to subscribe to, it must end with '!' or have an '~' in the name","title":"Arguments:"},{"location":"flightplans/avian-library/messages/subscribetochannel/#examples","text":"avian-cli subscribetochannel \"ASSET_NAME!\"","title":"Examples:"},{"location":"flightplans/avian-library/messages/unsubscribefromchannel/","text":"unsubscribefromchannel Unsubscribe from a certain message channel Arguments: 1. \"channel_name\" (string, required) The channel name to unsubscribe from, must end with '!' or have an '~' in the name Examples: avian-cli unsubscribefromchannel \"ASSET_NAME!\"","title":"unsubscribefromchannel"},{"location":"flightplans/avian-library/messages/unsubscribefromchannel/#unsubscribefromchannel","text":"Unsubscribe from a certain message channel","title":"unsubscribefromchannel"},{"location":"flightplans/avian-library/messages/unsubscribefromchannel/#arguments","text":"1. \"channel_name\" (string, required) The channel name to unsubscribe from, must end with '!' or have an '~' in the name","title":"Arguments:"},{"location":"flightplans/avian-library/messages/unsubscribefromchannel/#examples","text":"avian-cli unsubscribefromchannel \"ASSET_NAME!\"","title":"Examples:"},{"location":"flightplans/avian-library/messages/verifymessage/","text":"verifymessage Verify a signed message Note Not to be confused with messaging assets. This command is used to verify signed messages via signmessage from localWallet Arguments: 1. \"address\" (string, required) The avian address to use for the signature. 2. \"signature\" (string, required) The signature provided by the signer in base 64 encoding (see signmessage). 3. \"message\" (string, required) The message that was signed. Result: true|false (boolean) If the signature is verified or not. Examples: Unlock the wallet for 30 seconds avian-cli walletpassphrase \"mypassphrase\" 30 Verify a signed message Arguments: 1. \"address\" (string, required) The avian address to use for the signature. 2. \"signature\" (string, required) The signature provided by the signer in base 64 encoding (see signmessage). 3. \"message\" (string, required) The message that was signed. Result: true|false (boolean) If the signature is verified or not. Examples: Unlock the wallet for 30 seconds avian-cli walletpassphrase \"mypassphrase\" 30 Create the signature avian-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\" Verify the signature avian-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\" As json rpc curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/ Create the signature avian-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\" Verify the signature avian-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\" As json rpc curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"verifymessage"},{"location":"flightplans/avian-library/messages/verifymessage/#verifymessage","text":"Verify a signed message Note Not to be confused with messaging assets. This command is used to verify signed messages via signmessage from localWallet","title":"verifymessage"},{"location":"flightplans/avian-library/messages/verifymessage/#arguments","text":"1. \"address\" (string, required) The avian address to use for the signature. 2. \"signature\" (string, required) The signature provided by the signer in base 64 encoding (see signmessage). 3. \"message\" (string, required) The message that was signed.","title":"Arguments:"},{"location":"flightplans/avian-library/messages/verifymessage/#result","text":"true|false (boolean) If the signature is verified or not.","title":"Result:"},{"location":"flightplans/avian-library/messages/verifymessage/#examples","text":"Unlock the wallet for 30 seconds avian-cli walletpassphrase \"mypassphrase\" 30 Verify a signed message Arguments: 1. \"address\" (string, required) The avian address to use for the signature. 2. \"signature\" (string, required) The signature provided by the signer in base 64 encoding (see signmessage). 3. \"message\" (string, required) The message that was signed. Result: true|false (boolean) If the signature is verified or not. Examples: Unlock the wallet for 30 seconds avian-cli walletpassphrase \"mypassphrase\" 30 Create the signature avian-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\" Verify the signature avian-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\" As json rpc curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/ Create the signature avian-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\" Verify the signature avian-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\" As json rpc curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"Examples:"},{"location":"flightplans/avian-library/messages/viewallmessagechannels/","text":"viewallmessagechannels View all message channels the wallet is subscribed to","title":"viewallmessagechannels"},{"location":"flightplans/avian-library/messages/viewallmessagechannels/#viewallmessagechannels","text":"View all message channels the wallet is subscribed to","title":"viewallmessagechannels"},{"location":"flightplans/avian-library/messages/viewallmessages/","text":"viewallmessages View all messages that the wallet contains Result: \"Asset Name:\" (string) The name of the asset the message was sent on \"Message:\" (string) The IPFS hash of the message \"Time:\" (Date) The time as a date in the format (YY-mm-dd Hour-minute-second) \"Block Height:\" (number) The height of the block the message was included in \"Status:\" (string) Status of the message (READ, UNREAD, ORPHAN, EXPIRED, SPAM, HIDDEN, ERROR) \"Expire Time:\" (Date, optional) If the message had an expiration date assigned, it will be shown here in the format (YY-mm-dd Hour-minute-second) \"Expire UTC Time:\" (Date, optional) If the message contains an expire date that is too large, the UTC number will be displayed Examples: avian-cli viewallmessages","title":"viewallmessages"},{"location":"flightplans/avian-library/messages/viewallmessages/#viewallmessages","text":"View all messages that the wallet contains Result: \"Asset Name:\" (string) The name of the asset the message was sent on \"Message:\" (string) The IPFS hash of the message \"Time:\" (Date) The time as a date in the format (YY-mm-dd Hour-minute-second) \"Block Height:\" (number) The height of the block the message was included in \"Status:\" (string) Status of the message (READ, UNREAD, ORPHAN, EXPIRED, SPAM, HIDDEN, ERROR) \"Expire Time:\" (Date, optional) If the message had an expiration date assigned, it will be shown here in the format (YY-mm-dd Hour-minute-second) \"Expire UTC Time:\" (Date, optional) If the message contains an expire date that is too large, the UTC number will be displayed Examples: avian-cli viewallmessages","title":"viewallmessages"},{"location":"flightplans/avian-library/mining/getblocktemplate/","text":"getblocktemplate getblocktemplate ( TemplateRequest ) If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'. It returns data needed to construct a block to work on. Note For full specification, see BIPs 22, 23, 9, and 145: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki Arguments: template_request (json object, optional) A json object in the following spec { \"powalgo\" : \"xxxx\" (s tr i n g , op t io nal ) This ca n be se t t o \"x16rt\" or \"crow\" . I f omi tte d , walle t 's de fault is assumed ( - powalgo co nf op t io n ) \"mode\" : \"template\" (s tr i n g , op t io nal ) This mus t be se t t o \"template\" , \"proposal\" (see BIP 23 ) , or omi tte d \"capabilities\" :[ (array , op t io nal ) A lis t o f s tr i n gs \"support\" (s tr i n g) clie nt side suppor te d feature , 'lo n gpoll' , 'coi n base t x n ' , 'coi n basevalue' , 'proposal' , 'serverlis t ' , 'workid' , ... ], \"rules\" :[ (array , op t io nal ) A lis t o f s tr i n gs \"support\" (s tr i n g) clie nt side suppor te d so ftf ork deployme nt , ... ] } Result: { \"version\" : n , ( nu meric) The pre ferre d block versio n \"rules\" : [ \"rulename\" , ... ], (array o f s tr i n gs) speci f ic block rules t ha t are t o be e nf orced \"vbavailable\" : { (jso n objec t ) se t o f pe n di n g , suppor te d versio n bi t (BIP 9 ) so ftf ork deployme nts \"rulename\" : bi tnu mber ( nu meric) ide nt i f ies t he bi t nu mber as i n dica t i n g accep tan ce a n d readi ness f or t he na med so ftf ork rule , ... }, \"vbrequired\" : n , ( nu meric) bi t mask o f versio n bi ts t he server requires se t i n submissio ns \"previousblockhash\" : \"xxxx\" , (s tr i n g) The hash o f curre nt highes t block \"transactions\" : [ (array) co ntents o f n o n - coi n base transa c t io ns t ha t should be i n cluded i n t he ne x t block { \"data\" : \"xxxx\" , (s tr i n g) transa c t io n da ta e n coded i n hexadecimal (by te - f or - by te ) \"txid\" : \"xxxx\" , (s tr i n g) transa c t io n id e n coded i n li ttle -e n dia n hexadecimal \"hash\" : \"xxxx\" , (s tr i n g) hash e n coded i n li ttle -e n dia n hexadecimal (i n cludi n g wi tness da ta ) \"depends\" : [ (array) array o f nu mbers n ( nu meric) transa c t io ns be f ore t his o ne (by 1- based i n dex i n ' transa c t io ns ' lis t ) t ha t mus t be prese nt i n t he f i nal block i f t his o ne is , ... ], \"fee\" : n , ( nu meric) di fferen ce i n value be t wee n transa c t io n i n pu ts a n d ou t pu ts (i n sa t oshis); f or coi n base transa c t io ns , t his is a ne ga t ive Number o f t he t o tal collec te d block fees (ie , n o t i n cludi n g t he block subsidy); i f key is n o t prese nt , fee is u n k n ow n a n d clie nts MUST NOT assume t here is n ' t o ne \"sigops\" : n , ( nu meric) t o tal SigOps cos t , as cou nte d f or purposes o f block limi ts ; i f key is n o t prese nt , sigop cos t is u n k n ow n a n d clie nts MUST NOT assume i t is zero \"weight\" : n , ( nu meric) t o tal transa c t io n weigh t , as cou nte d f or purposes o f block limi ts \"required\" : true | false (boolea n ) i f provided a n d true , t his transa c t io n mus t be i n t he f i nal block } , ... ], \"coinbaseaux\" : { (jso n objec t ) da ta t ha t should be i n cluded i n t he coi n base's scrip t Sig co ntent \"flags\" : \"xx\" (s tr i n g) key na me is t o be ig n ored , a n d value i n cluded i n scrip t Sig }, \"coinbasevalue\" : n , ( nu meric) maximum allowable i n pu t t o coi n base transa c t io n , i n cludi n g t he ge nerat io n award a n d transa c t io n fees (i n sa t oshis) \"coinbasetxn\" : { ... }, (jso n objec t ) i nf orma t io n f or coi n base transa c t io n \"target\" : \"xxxx\" , (s tr i n g) The hash tar ge t \"mintime\" : xxx , ( nu meric) The mi n imum t imes ta mp appropria te f or ne x t block t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) \"mutable\" : [ (array o f s tr i n g) lis t o f ways t he block te mpla te may be cha n ged \"value\" (s tr i n g) A way t he block te mpla te may be cha n ged , e.g. ' t ime' , ' transa c t io ns ' , 'prevblock' , ... ], \"noncerange\" : \"00000000ffffffff\" , (s tr i n g) A ra n ge o f valid n o n ces \"sigoplimit\" : n , ( nu meric) limi t o f sigops i n blocks \"sizelimit\" : n , ( nu meric) limi t o f block size \"weightlimit\" : n , ( nu meric) limi t o f block weigh t \"curtime\" : ttt , ( nu meric) curre nt t imes ta mp i n seco n ds si n ce epoch (Ja n 1 1970 GMT) \"bits\" : \"xxxxxxxx\" , (s tr i n g) compressed tar ge t o f ne x t block \"height\" : n ( nu meric) The heigh t o f t he ne x t block } Examples: avian-cli getblocktemplate","title":"getblocktemplate"},{"location":"flightplans/avian-library/mining/getblocktemplate/#getblocktemplate","text":"getblocktemplate ( TemplateRequest ) If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'. It returns data needed to construct a block to work on. Note For full specification, see BIPs 22, 23, 9, and 145: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki","title":"getblocktemplate"},{"location":"flightplans/avian-library/mining/getblocktemplate/#arguments","text":"template_request (json object, optional) A json object in the following spec { \"powalgo\" : \"xxxx\" (s tr i n g , op t io nal ) This ca n be se t t o \"x16rt\" or \"crow\" . I f omi tte d , walle t 's de fault is assumed ( - powalgo co nf op t io n ) \"mode\" : \"template\" (s tr i n g , op t io nal ) This mus t be se t t o \"template\" , \"proposal\" (see BIP 23 ) , or omi tte d \"capabilities\" :[ (array , op t io nal ) A lis t o f s tr i n gs \"support\" (s tr i n g) clie nt side suppor te d feature , 'lo n gpoll' , 'coi n base t x n ' , 'coi n basevalue' , 'proposal' , 'serverlis t ' , 'workid' , ... ], \"rules\" :[ (array , op t io nal ) A lis t o f s tr i n gs \"support\" (s tr i n g) clie nt side suppor te d so ftf ork deployme nt , ... ] }","title":"Arguments:"},{"location":"flightplans/avian-library/mining/getblocktemplate/#result","text":"{ \"version\" : n , ( nu meric) The pre ferre d block versio n \"rules\" : [ \"rulename\" , ... ], (array o f s tr i n gs) speci f ic block rules t ha t are t o be e nf orced \"vbavailable\" : { (jso n objec t ) se t o f pe n di n g , suppor te d versio n bi t (BIP 9 ) so ftf ork deployme nts \"rulename\" : bi tnu mber ( nu meric) ide nt i f ies t he bi t nu mber as i n dica t i n g accep tan ce a n d readi ness f or t he na med so ftf ork rule , ... }, \"vbrequired\" : n , ( nu meric) bi t mask o f versio n bi ts t he server requires se t i n submissio ns \"previousblockhash\" : \"xxxx\" , (s tr i n g) The hash o f curre nt highes t block \"transactions\" : [ (array) co ntents o f n o n - coi n base transa c t io ns t ha t should be i n cluded i n t he ne x t block { \"data\" : \"xxxx\" , (s tr i n g) transa c t io n da ta e n coded i n hexadecimal (by te - f or - by te ) \"txid\" : \"xxxx\" , (s tr i n g) transa c t io n id e n coded i n li ttle -e n dia n hexadecimal \"hash\" : \"xxxx\" , (s tr i n g) hash e n coded i n li ttle -e n dia n hexadecimal (i n cludi n g wi tness da ta ) \"depends\" : [ (array) array o f nu mbers n ( nu meric) transa c t io ns be f ore t his o ne (by 1- based i n dex i n ' transa c t io ns ' lis t ) t ha t mus t be prese nt i n t he f i nal block i f t his o ne is , ... ], \"fee\" : n , ( nu meric) di fferen ce i n value be t wee n transa c t io n i n pu ts a n d ou t pu ts (i n sa t oshis); f or coi n base transa c t io ns , t his is a ne ga t ive Number o f t he t o tal collec te d block fees (ie , n o t i n cludi n g t he block subsidy); i f key is n o t prese nt , fee is u n k n ow n a n d clie nts MUST NOT assume t here is n ' t o ne \"sigops\" : n , ( nu meric) t o tal SigOps cos t , as cou nte d f or purposes o f block limi ts ; i f key is n o t prese nt , sigop cos t is u n k n ow n a n d clie nts MUST NOT assume i t is zero \"weight\" : n , ( nu meric) t o tal transa c t io n weigh t , as cou nte d f or purposes o f block limi ts \"required\" : true | false (boolea n ) i f provided a n d true , t his transa c t io n mus t be i n t he f i nal block } , ... ], \"coinbaseaux\" : { (jso n objec t ) da ta t ha t should be i n cluded i n t he coi n base's scrip t Sig co ntent \"flags\" : \"xx\" (s tr i n g) key na me is t o be ig n ored , a n d value i n cluded i n scrip t Sig }, \"coinbasevalue\" : n , ( nu meric) maximum allowable i n pu t t o coi n base transa c t io n , i n cludi n g t he ge nerat io n award a n d transa c t io n fees (i n sa t oshis) \"coinbasetxn\" : { ... }, (jso n objec t ) i nf orma t io n f or coi n base transa c t io n \"target\" : \"xxxx\" , (s tr i n g) The hash tar ge t \"mintime\" : xxx , ( nu meric) The mi n imum t imes ta mp appropria te f or ne x t block t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) \"mutable\" : [ (array o f s tr i n g) lis t o f ways t he block te mpla te may be cha n ged \"value\" (s tr i n g) A way t he block te mpla te may be cha n ged , e.g. ' t ime' , ' transa c t io ns ' , 'prevblock' , ... ], \"noncerange\" : \"00000000ffffffff\" , (s tr i n g) A ra n ge o f valid n o n ces \"sigoplimit\" : n , ( nu meric) limi t o f sigops i n blocks \"sizelimit\" : n , ( nu meric) limi t o f block size \"weightlimit\" : n , ( nu meric) limi t o f block weigh t \"curtime\" : ttt , ( nu meric) curre nt t imes ta mp i n seco n ds si n ce epoch (Ja n 1 1970 GMT) \"bits\" : \"xxxxxxxx\" , (s tr i n g) compressed tar ge t o f ne x t block \"height\" : n ( nu meric) The heigh t o f t he ne x t block }","title":"Result:"},{"location":"flightplans/avian-library/mining/getblocktemplate/#examples","text":"avian-cli getblocktemplate","title":"Examples:"},{"location":"flightplans/avian-library/mining/getmininginfo/","text":"getmininginfo Returns a json object containing mining-related information. Result: { \"blocks\" : nnn , ( nu meric) The curre nt block \"currentblockweight\" : nnn , ( nu meric) The las t block weigh t \"currentblocktx\" : nnn , ( nu meric) The las t block transa c t io n \"difficulty\" : xxx.xxxxx ( nu meric) The curre nt di ff icul t y f or pre - Crow \"difficulty_algorithm\" : x.x ( nu meric) t he curre nt di ff icul t y f or Crow o n ce ac t iva te d per algori t hm \"networkhashps\" : nnn , ( nu meric) The net work hashes per seco n d \"hashespersec\" : nnn , ( nu meric) The hashes per seco n d o f buil t - i n mi ner \"pooledtx\" : n ( nu meric) The size o f t he mempool \"chain\" : \"xxxx\" , (s tr i n g) curre nt net work na me as de f i ne d i n BIP 70 (mai n , test , reg test ) \"warnings\" : \"...\" (s tr i n g) a n y net work a n d blockchai n war n i n gs \"errors\" : \"...\" (s tr i n g) DEPRECATED. Same as war n i n gs. O nl y show n whe n avia n d is s tarte d wi t h - depreca te drpc=ge t mi n i n gi nf o } Examples: avian-cli getmininginfo","title":"getmininginfo"},{"location":"flightplans/avian-library/mining/getmininginfo/#getmininginfo","text":"Returns a json object containing mining-related information.","title":"getmininginfo"},{"location":"flightplans/avian-library/mining/getmininginfo/#result","text":"{ \"blocks\" : nnn , ( nu meric) The curre nt block \"currentblockweight\" : nnn , ( nu meric) The las t block weigh t \"currentblocktx\" : nnn , ( nu meric) The las t block transa c t io n \"difficulty\" : xxx.xxxxx ( nu meric) The curre nt di ff icul t y f or pre - Crow \"difficulty_algorithm\" : x.x ( nu meric) t he curre nt di ff icul t y f or Crow o n ce ac t iva te d per algori t hm \"networkhashps\" : nnn , ( nu meric) The net work hashes per seco n d \"hashespersec\" : nnn , ( nu meric) The hashes per seco n d o f buil t - i n mi ner \"pooledtx\" : n ( nu meric) The size o f t he mempool \"chain\" : \"xxxx\" , (s tr i n g) curre nt net work na me as de f i ne d i n BIP 70 (mai n , test , reg test ) \"warnings\" : \"...\" (s tr i n g) a n y net work a n d blockchai n war n i n gs \"errors\" : \"...\" (s tr i n g) DEPRECATED. Same as war n i n gs. O nl y show n whe n avia n d is s tarte d wi t h - depreca te drpc=ge t mi n i n gi nf o }","title":"Result:"},{"location":"flightplans/avian-library/mining/getmininginfo/#examples","text":"avian-cli getmininginfo","title":"Examples:"},{"location":"flightplans/avian-library/mining/getnetworkhashps/","text":"getnetworkhashps Returns the estimated network hashes per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found. Arguments: nblocks (numeric, optional, default=5) The number of blocks, or -1 for blocks since last difficulty change. height (numeric, optional, default=-1) To estimate at the time of the given height. powalgo (string, optional) This can be set to \"minotaurx\" or \"x16rt\". If omitted, wallet's default is assumed (-powalgo conf option) Result: x (numeric) Hashes per second estimated Examples: avian-cli getnetworkhashps","title":"getnetworkhashps"},{"location":"flightplans/avian-library/mining/getnetworkhashps/#getnetworkhashps","text":"Returns the estimated network hashes per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found.","title":"getnetworkhashps"},{"location":"flightplans/avian-library/mining/getnetworkhashps/#arguments","text":"nblocks (numeric, optional, default=5) The number of blocks, or -1 for blocks since last difficulty change. height (numeric, optional, default=-1) To estimate at the time of the given height. powalgo (string, optional) This can be set to \"minotaurx\" or \"x16rt\". If omitted, wallet's default is assumed (-powalgo conf option)","title":"Arguments:"},{"location":"flightplans/avian-library/mining/getnetworkhashps/#result","text":"x (numeric) Hashes per second estimated","title":"Result:"},{"location":"flightplans/avian-library/mining/getnetworkhashps/#examples","text":"avian-cli getnetworkhashps","title":"Examples:"},{"location":"flightplans/avian-library/network/addnode/","text":"addnode addnode \"node\" \"add|remove|onetry\" Attempts to add or remove a node from the addnode list. Or try a connection to a node once. Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be full nodes/support SegWit as other outbound peers are (though such peers will not be synced from). Arguments: 1. \"node\" (string, required) The node (see getpeerinfo for nodes) 2. \"command\" (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once Examples: avian-cli addnode \"192.168.0.6:8767\" \"onetry\"","title":"addnode"},{"location":"flightplans/avian-library/network/addnode/#addnode","text":"addnode \"node\" \"add|remove|onetry\" Attempts to add or remove a node from the addnode list. Or try a connection to a node once. Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be full nodes/support SegWit as other outbound peers are (though such peers will not be synced from). Arguments: 1. \"node\" (string, required) The node (see getpeerinfo for nodes) 2. \"command\" (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once Examples: avian-cli addnode \"192.168.0.6:8767\" \"onetry\"","title":"addnode"},{"location":"flightplans/avian-library/network/clearbanned/","text":"clearbanned Clear all banned IPs.","title":"clearbanned"},{"location":"flightplans/avian-library/network/clearbanned/#clearbanned","text":"Clear all banned IPs.","title":"clearbanned"},{"location":"flightplans/avian-library/network/disconnectnode/","text":"disconnectnode disconnectnode \"[address]\" [nodeid] Immediately disconnects from the specified peer node. Strictly one out of 'address' and 'nodeid' can be provided to identify the node. To disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only. Arguments: 1. \"address\" (string, optional) The IP address/port of the node 2. \"nodeid\" (number, optional) The node ID (see getpeerinfo for node IDs) Examples: avian-cli disconnectnode \"192.168.0.6:8767\" avian-cli disconnectnode \"\" 1","title":"disconnectnode"},{"location":"flightplans/avian-library/network/disconnectnode/#disconnectnode","text":"disconnectnode \"[address]\" [nodeid] Immediately disconnects from the specified peer node. Strictly one out of 'address' and 'nodeid' can be provided to identify the node. To disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only. Arguments: 1. \"address\" (string, optional) The IP address/port of the node 2. \"nodeid\" (number, optional) The node ID (see getpeerinfo for node IDs) Examples: avian-cli disconnectnode \"192.168.0.6:8767\" avian-cli disconnectnode \"\" 1","title":"disconnectnode"},{"location":"flightplans/avian-library/network/getaddednodeinfo/","text":"getaddednodeinfo Returns information about the given added node, or all added nodes Note Note that onetry addnodes are not listed here. Arguments: 1. \"node\" (string, optional) If provided, return information about this specific node, otherwise all nodes are returned. Result: [ { \"addednode\" : \"192.168.0.201\" , (s tr i n g) The n ode IP address or na me (as provided t o add n ode) \"connected\" : true | false , (boolea n ) I f co nne c te d \"addresses\" : [ (lis t o f objec ts ) O nl y whe n co nne c te d = true { \"address\" : \"192.168.0.201:8767\" , (s tr i n g) The avia n server IP a n d por t we're co nne c te d t o \"connected\" : \"outbound\" (s tr i n g) co nne c t io n , i n bou n d or ou t bou n d } ] } , ... ] Examples: avian-cli getaddednodeinfo \"192.168.0.201\"","title":"getaddednodeinfo"},{"location":"flightplans/avian-library/network/getaddednodeinfo/#getaddednodeinfo","text":"Returns information about the given added node, or all added nodes Note Note that onetry addnodes are not listed here. Arguments: 1. \"node\" (string, optional) If provided, return information about this specific node, otherwise all nodes are returned. Result: [ { \"addednode\" : \"192.168.0.201\" , (s tr i n g) The n ode IP address or na me (as provided t o add n ode) \"connected\" : true | false , (boolea n ) I f co nne c te d \"addresses\" : [ (lis t o f objec ts ) O nl y whe n co nne c te d = true { \"address\" : \"192.168.0.201:8767\" , (s tr i n g) The avia n server IP a n d por t we're co nne c te d t o \"connected\" : \"outbound\" (s tr i n g) co nne c t io n , i n bou n d or ou t bou n d } ] } , ... ] Examples: avian-cli getaddednodeinfo \"192.168.0.201\"","title":"getaddednodeinfo"},{"location":"flightplans/avian-library/network/getconnectioncount/","text":"getconnectioncount Returns the number of connections to other nodes. Result: n (numeric) The connection count","title":"getconnectioncount"},{"location":"flightplans/avian-library/network/getconnectioncount/#getconnectioncount","text":"Returns the number of connections to other nodes. Result: n (numeric) The connection count","title":"getconnectioncount"},{"location":"flightplans/avian-library/network/getnettotals/","text":"getnettotals Returns information about network traffic, including bytes in, bytes out, and current time. Result: { \"totalbytesrecv\" : n , ( nu meric) To tal by tes received \"totalbytessent\" : n , ( nu meric) To tal by tes se nt \"timemillis\" : t , ( nu meric) Curre nt UNIX t ime i n milliseco n ds \"uploadtarget\" : { \"timeframe\" : n , ( nu meric) Le n g t h o f t he measuri n g t ime fra me i n seco n ds \"target\" : n , ( nu meric) Targe t i n by tes \"target_reached\" : true | false , (boolea n ) True i f tar ge t is reached \"serve_historical_blocks\" : true | false , (boolea n ) True i f servi n g his t orical blocks \"bytes_left_in_cycle\" : t , ( nu meric) By tes le ft i n curre nt t ime cycle \"time_left_in_cycle\" : t ( nu meric) Seco n ds le ft i n curre nt t ime cycle } } Examples: avian-cli getnettotals","title":"getnettotals"},{"location":"flightplans/avian-library/network/getnettotals/#getnettotals","text":"Returns information about network traffic, including bytes in, bytes out, and current time. Result: { \"totalbytesrecv\" : n , ( nu meric) To tal by tes received \"totalbytessent\" : n , ( nu meric) To tal by tes se nt \"timemillis\" : t , ( nu meric) Curre nt UNIX t ime i n milliseco n ds \"uploadtarget\" : { \"timeframe\" : n , ( nu meric) Le n g t h o f t he measuri n g t ime fra me i n seco n ds \"target\" : n , ( nu meric) Targe t i n by tes \"target_reached\" : true | false , (boolea n ) True i f tar ge t is reached \"serve_historical_blocks\" : true | false , (boolea n ) True i f servi n g his t orical blocks \"bytes_left_in_cycle\" : t , ( nu meric) By tes le ft i n curre nt t ime cycle \"time_left_in_cycle\" : t ( nu meric) Seco n ds le ft i n curre nt t ime cycle } } Examples: avian-cli getnettotals","title":"getnettotals"},{"location":"flightplans/avian-library/network/getnetworkinfo/","text":"getnetworkinfo Returns an object containing various state info regarding P2P networking. Result: { \"version\" : xxxxx , ( nu meric) t he server versio n \"subversion\" : \"/Satoshi:x.x.x/\" , (s tr i n g) t he server subversio n s tr i n g \"protocolversion\" : xxxxx , ( nu meric) t he pro t ocol versio n \"localservices\" : \"xxxxxxxxxxxxxxxx\" , (s tr i n g) t he services we o ffer t o t he net work \"localrelay\" : true | false , (bool) true i f transa c t io n relay is reques te d fr om peers \"timeoffset\" : xxxxx , ( nu meric) t he t ime o ffset \"connections\" : xxxxx , ( nu meric) t he nu mber o f co nne c t io ns \"networkactive\" : true | false , (bool) whe t her p 2 p net worki n g is e na bled \"networks\" : [ (array) i nf orma t io n per net work { \"name\" : \"xxx\" , (s tr i n g) net work (ipv 4 , ipv 6 or o n io n ) \"limited\" : true | false , (boolea n ) is t he net work limi te d usi n g - o nl y net ? \"reachable\" : true | false , (boolea n ) is t he net work reachable? \"proxy\" : \"host:port\" (s tr i n g) t he proxy t ha t is used f or t his net work , or emp t y i f n o ne \"proxy_randomize_credentials\" : true | false , (s tr i n g) Whe t her ra n domized crede nt ials are used } , ... ], \"relayfee\" : x.xxxxxxxx , ( nu meric) mi n imum relay fee f or transa c t io ns i n AVN/kB \"incrementalfee\" : x.xxxxxxxx , ( nu meric) mi n imum fee i n creme nt f or mempool limi t i n g or BIP 125 replaceme nt i n AVN/kB \"localaddresses\" : [ (array) lis t o f local addresses { \"address\" : \"xxxx\" , (s tr i n g) net work address \"port\" : xxx , ( nu meric) net work por t \"score\" : xxx ( nu meric) rela t ive score } , ... ] \"warnings\" : \"...\" (s tr i n g) a n y net work a n d blockchai n war n i n gs } Examples: avian-cli getnetworkinfo","title":"getnetworkinfo"},{"location":"flightplans/avian-library/network/getnetworkinfo/#getnetworkinfo","text":"Returns an object containing various state info regarding P2P networking. Result: { \"version\" : xxxxx , ( nu meric) t he server versio n \"subversion\" : \"/Satoshi:x.x.x/\" , (s tr i n g) t he server subversio n s tr i n g \"protocolversion\" : xxxxx , ( nu meric) t he pro t ocol versio n \"localservices\" : \"xxxxxxxxxxxxxxxx\" , (s tr i n g) t he services we o ffer t o t he net work \"localrelay\" : true | false , (bool) true i f transa c t io n relay is reques te d fr om peers \"timeoffset\" : xxxxx , ( nu meric) t he t ime o ffset \"connections\" : xxxxx , ( nu meric) t he nu mber o f co nne c t io ns \"networkactive\" : true | false , (bool) whe t her p 2 p net worki n g is e na bled \"networks\" : [ (array) i nf orma t io n per net work { \"name\" : \"xxx\" , (s tr i n g) net work (ipv 4 , ipv 6 or o n io n ) \"limited\" : true | false , (boolea n ) is t he net work limi te d usi n g - o nl y net ? \"reachable\" : true | false , (boolea n ) is t he net work reachable? \"proxy\" : \"host:port\" (s tr i n g) t he proxy t ha t is used f or t his net work , or emp t y i f n o ne \"proxy_randomize_credentials\" : true | false , (s tr i n g) Whe t her ra n domized crede nt ials are used } , ... ], \"relayfee\" : x.xxxxxxxx , ( nu meric) mi n imum relay fee f or transa c t io ns i n AVN/kB \"incrementalfee\" : x.xxxxxxxx , ( nu meric) mi n imum fee i n creme nt f or mempool limi t i n g or BIP 125 replaceme nt i n AVN/kB \"localaddresses\" : [ (array) lis t o f local addresses { \"address\" : \"xxxx\" , (s tr i n g) net work address \"port\" : xxx , ( nu meric) net work por t \"score\" : xxx ( nu meric) rela t ive score } , ... ] \"warnings\" : \"...\" (s tr i n g) a n y net work a n d blockchai n war n i n gs } Examples: avian-cli getnetworkinfo","title":"getnetworkinfo"},{"location":"flightplans/avian-library/network/getpeerinfo/","text":"getpeerinfo Returns data about each connected network node as a json array of objects. Result: [ { \"id\" : n , ( nu meric) Peer i n dex \"addr\" : \"host:port\" , (s tr i n g) The IP address a n d por t o f t he peer \"addrbind\" : \"ip:port\" , (s tr i n g) Bi n d address o f t he co nne c t io n t o t he peer \"addrlocal\" : \"ip:port\" , (s tr i n g) Local address as repor te d by t he peer \"services\" : \"xxxxxxxxxxxxxxxx\" , (s tr i n g) The services o ffere d \"relaytxes\" : true | false , (boolea n ) Whe t her peer has asked us t o relay transa c t io ns t o i t \"lastsend\" : ttt , ( nu meric) The t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) o f t he las t se n d \"lastrecv\" : ttt , ( nu meric) The t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) o f t he las t receive \"bytessent\" : n , ( nu meric) The t o tal by tes se nt \"bytesrecv\" : n , ( nu meric) The t o tal by tes received \"conntime\" : ttt , ( nu meric) The co nne c t io n t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) \"timeoffset\" : ttt , ( nu meric) The t ime o ffset i n seco n ds \"pingtime\" : n , ( nu meric) pi n g t ime (i f available) \"minping\" : n , ( nu meric) mi n imum observed pi n g t ime (i f a n y a t all) \"pingwait\" : n , ( nu meric) pi n g wai t (i f n o n - zero) \"version\" : v , ( nu meric) The peer versio n , such as 7001 \"subver\" : \"/Satoshi:0.8.5/\" , (s tr i n g) The s tr i n g versio n \"inbound\" : true | false , (boolea n ) I n bou n d ( true ) or Ou t bou n d ( false ) \"addnode\" : true | false , (boolea n ) Whe t her co nne c t io n was due t o add n ode/ - co nne c t or i f i t was a n au t oma t ic/i n bou n d co nne c t io n \"startingheight\" : n , ( nu meric) The s tart i n g heigh t (block) o f t he peer \"banscore\" : n , ( nu meric) The ba n score \"synced_headers\" : n , ( nu meric) The las t header we have i n commo n wi t h t his peer \"synced_blocks\" : n , ( nu meric) The las t block we have i n commo n wi t h t his peer \"inflight\" : [ n , ( nu meric) The heigh ts o f blocks we're curre ntl y aski n g fr om t his peer ... ], \"whitelisted\" : true | false , (boolea n ) Whe t her t he peer is whi tel is te d \"bytessent_per_msg\" : { \"addr\" : n , ( nu meric) The t o tal by tes se nt aggrega te d by message t ype ... }, \"bytesrecv_per_msg\" : { \"addr\" : n , ( nu meric) The t o tal by tes received aggrega te d by message t ype ... } } , ... ] Examples: avian-cli getpeerinfo","title":"getpeerinfo"},{"location":"flightplans/avian-library/network/getpeerinfo/#getpeerinfo","text":"Returns data about each connected network node as a json array of objects. Result: [ { \"id\" : n , ( nu meric) Peer i n dex \"addr\" : \"host:port\" , (s tr i n g) The IP address a n d por t o f t he peer \"addrbind\" : \"ip:port\" , (s tr i n g) Bi n d address o f t he co nne c t io n t o t he peer \"addrlocal\" : \"ip:port\" , (s tr i n g) Local address as repor te d by t he peer \"services\" : \"xxxxxxxxxxxxxxxx\" , (s tr i n g) The services o ffere d \"relaytxes\" : true | false , (boolea n ) Whe t her peer has asked us t o relay transa c t io ns t o i t \"lastsend\" : ttt , ( nu meric) The t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) o f t he las t se n d \"lastrecv\" : ttt , ( nu meric) The t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) o f t he las t receive \"bytessent\" : n , ( nu meric) The t o tal by tes se nt \"bytesrecv\" : n , ( nu meric) The t o tal by tes received \"conntime\" : ttt , ( nu meric) The co nne c t io n t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) \"timeoffset\" : ttt , ( nu meric) The t ime o ffset i n seco n ds \"pingtime\" : n , ( nu meric) pi n g t ime (i f available) \"minping\" : n , ( nu meric) mi n imum observed pi n g t ime (i f a n y a t all) \"pingwait\" : n , ( nu meric) pi n g wai t (i f n o n - zero) \"version\" : v , ( nu meric) The peer versio n , such as 7001 \"subver\" : \"/Satoshi:0.8.5/\" , (s tr i n g) The s tr i n g versio n \"inbound\" : true | false , (boolea n ) I n bou n d ( true ) or Ou t bou n d ( false ) \"addnode\" : true | false , (boolea n ) Whe t her co nne c t io n was due t o add n ode/ - co nne c t or i f i t was a n au t oma t ic/i n bou n d co nne c t io n \"startingheight\" : n , ( nu meric) The s tart i n g heigh t (block) o f t he peer \"banscore\" : n , ( nu meric) The ba n score \"synced_headers\" : n , ( nu meric) The las t header we have i n commo n wi t h t his peer \"synced_blocks\" : n , ( nu meric) The las t block we have i n commo n wi t h t his peer \"inflight\" : [ n , ( nu meric) The heigh ts o f blocks we're curre ntl y aski n g fr om t his peer ... ], \"whitelisted\" : true | false , (boolea n ) Whe t her t he peer is whi tel is te d \"bytessent_per_msg\" : { \"addr\" : n , ( nu meric) The t o tal by tes se nt aggrega te d by message t ype ... }, \"bytesrecv_per_msg\" : { \"addr\" : n , ( nu meric) The t o tal by tes received aggrega te d by message t ype ... } } , ... ] Examples: avian-cli getpeerinfo","title":"getpeerinfo"},{"location":"flightplans/avian-library/network/listbanned/","text":"listbanned List all banned IPs/Subnets.","title":"listbanned"},{"location":"flightplans/avian-library/network/listbanned/#listbanned","text":"List all banned IPs/Subnets.","title":"listbanned"},{"location":"flightplans/avian-library/network/ping/","text":"ping Requests that a ping be sent to all other nodes, to measure ping time. Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds. Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.","title":"ping"},{"location":"flightplans/avian-library/network/ping/#ping","text":"Requests that a ping be sent to all other nodes, to measure ping time. Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds. Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.","title":"ping"},{"location":"flightplans/avian-library/raw_transactions/combinerawtransaction/","text":"combinerawtransaction combinerawtransaction [\"hexstring\",...] Combine multiple partially signed transactions into one transaction. The combined transaction may be another partially signed transaction or a fully signed transaction. Arguments: \"txs\" (string) A json array of hex strings of partially signed transactions [ \"hexstring\" (s tr i n g) A transa c t io n hash , ... ] Result: \"hex\" (string) The hex-encoded raw transaction with signature(s) Examples: avian-cli combinerawtransaction [\"myhex1\", \"myhex2\", \"myhex3\"]","title":"combinerawtransaction"},{"location":"flightplans/avian-library/raw_transactions/combinerawtransaction/#combinerawtransaction","text":"combinerawtransaction [\"hexstring\",...] Combine multiple partially signed transactions into one transaction. The combined transaction may be another partially signed transaction or a fully signed transaction.","title":"combinerawtransaction"},{"location":"flightplans/avian-library/raw_transactions/combinerawtransaction/#arguments","text":"\"txs\" (string) A json array of hex strings of partially signed transactions [ \"hexstring\" (s tr i n g) A transa c t io n hash , ... ]","title":"Arguments:"},{"location":"flightplans/avian-library/raw_transactions/combinerawtransaction/#result","text":"\"hex\" (string) The hex-encoded raw transaction with signature(s)","title":"Result:"},{"location":"flightplans/avian-library/raw_transactions/combinerawtransaction/#examples","text":"avian-cli combinerawtransaction [\"myhex1\", \"myhex2\", \"myhex3\"]","title":"Examples:"},{"location":"flightplans/avian-library/raw_transactions/createrawtransaction/","text":"createrawtransaction createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":(amount or object),\"data\":\"hex\",...} ( locktime ) ( replaceable ) Create a transaction spending the given inputs and creating new outputs. Outputs are addresses (paired with a AVN amount, data or object specifying an asset operation) or data. Returns hex-encoded raw transaction. Note Note that the transaction's inputs are not signed, and it is not stored in the wallet or transmitted to the network. Paying for Asset Operations: Some operations require an amount of AVN to be sent to a burn address: Operation Amount + Burn Address transfer 0 transferwithmessage 0 issue 500 to n1issueAssetXXXXXXXXXXXXXXXXWdnemQ issue (subasset) 100 to n1issueSubAssetXXXXXXXXXXXXXbNiH6v issue_unique 5 to n1issueUniqueAssetXXXXXXXXXXS4695i reissue 100 to n1ReissueAssetXXXXXXXXXXXXXXWG9NLd issue_restricted 1500 to n1issueRestrictedXXXXXXXXXXXXZVT9V reissue_restricted 100 to n1ReissueAssetXXXXXXXXXXXXXXWG9NLd issue_qualifier 1000 to n1issueQuaLifierXXXXXXXXXXXXUysLTj issue_qualifier (sub) 100 to n1issueSubQuaLifierXXXXXXXXXYffPLh tag_addresses 0.1 to n1addTagBurnXXXXXXXXXXXXXXXXX5oLMH (per address) untag_addresses 0.1 to n1addTagBurnXXXXXXXXXXXXXXXXX5oLMH (per address) freeze_addresses 0 unfreeze_addresses 0 freeze_asset 0 unfreeze_asset 0 Assets For Authorization: These operations require a specific asset input for authorization: Root Owner Token: reissue issue_unique issue_restricted reissue_restricted freeze_addresses unfreeze_addresses freeze_asset unfreeze_asset Root Qualifier Token: issue_qualifier (when issuing subqualifier) Qualifier Token: tag_addresses untag_addresses Output Ordering: Asset operations require the following: 1) All coin outputs come first (including the burn output). 2) The owner token change output comes next (if required). 3) An issue, reissue, or any number of transfers comes last (different types can't be mixed in a single transaction). Arguments: 1. \"inputs\" (array , required) A jso n array o f jso n objec ts [ { \"txid\" : \"id\" , (s tr i n g , required) The transa c t io n id \"vout\" : n , ( nu mber , required) The ou t pu t nu mber \"sequence\" : n ( nu mber , op t io nal ) The seque n ce nu mber } , ... ] 2. \"outputs\" (objec t , required) a jso n objec t wi t h ou t pu ts { \"address\" : (s tr i n g , required) The des t i nat io n avia n address. Each ou t pu t mus t have a di fferent address. x.xxx ( nu mber or s tr i n g , required) The AVN amou nt or { (objec t ) A jso n objec t o f asse ts t o se n d \"transfer\" : { \"asset-name\" : (s tr i n g , required) asse t na me asse t - qua nt i t y ( nu mber , required) t he nu mber o f raw u n i ts t o transfer , ... } } or { (objec t ) A jso n objec t o f describi n g t he transfer a n d message co ntents t o se n d \"transferwithmessage\" : { \"asset-name\" : (s tr i n g , required) asse t na me asse t - qua nt i t y , ( nu mber , required) t he nu mber o f raw u n i ts t o transfer \"message\" : \"hash\" , (s tr i n g , required) ip fs hash or a t xid hash \"expire_time\" : n ( nu mber , required) u t c t ime i n seco n ds t o expire t he message } } or { (objec t ) A jso n objec t describi n g ne w asse ts t o issue \"issue\" : { \"asset_name\" : \"asset-name\" , (s tr i n g , required) ne w asse t na me \"asset_quantity\" : n , ( nu mber , required) t he nu mber o f raw u n i ts t o issue \"units\" :[ 1-8 ], ( nu mber , required) display u n i ts , be t wee n 1 (i nte gral) t o 8 (max precisio n ) \"reissuable\" :[ 0-1 ], ( nu mber , required) 1 =reissuable asse t \"has_ipfs\" :[ 0-1 ], ( nu mber , required) 1 =passi n g ip fs _hash \"ipfs_hash\" : \"hash\" (s tr i n g , op t io nal ) a n ip fs hash f or discoveri n g asse t me ta da ta } } or { (objec t ) A jso n objec t describi n g ne w u n ique asse ts t o issue \"issue_unique\" : { \"root_name\" : \"root-name\" , (s tr i n g , required) na me o f t he asse t t he u n ique asse t (s) are bei n g issued u n der \"asset_tags\" :[ \"asset_tag\" , ... ], (array , required) t he u n ique ta g f or each asse t which is t o be issued \"ipfs_hashes\" :[ \"hash\" , ... ], (array , op t io nal ) ip fs hashes correspo n di n g t o each supplied ta g (should be same size as \"asset_tags\" ) } } or { (objec t ) A jso n objec t describi n g f ollow - o n asse t issue. \"reissue\" : { \"asset_name\" : \"asset-name\" , (s tr i n g , required) na me o f asse t t o be reissued \"asset_quantity\" : n , ( nu mber , required) t he nu mber o f raw u n i ts t o issue \"reissuable\" :[ 0-1 ], ( nu mber , op t io nal ) de fault is 1 , 1 =reissuable asse t \"ipfs_hash\" : \"hash\" , (s tr i n g , op t io nal ) A n ip fs hash f or discoveri n g asse t me ta da ta , Overrides t he curre nt ip fs hash i f give n \"owner_change_address\" (s tr i n g , op t io nal ) t he address where t he ow ner t oke n will be se nt t o. I f n o t give n , i t will be se nt t o t he ou t pu t address } } or { (objec t ) A jso n objec t describi n g how res tr ic te d asse t t o issue \"issue_restricted\" : { \"asset_name\" : \"asset-name\" , (s tr i n g , required) ne w asse t na me \"asset_quantity\" : n , ( nu mber , required) t he nu mber o f raw u n i ts t o issue \"verifier_string\" : \"text\" , (s tr i n g , required) t he veri f ier s tr i n g t o be used f or a res tr ic te d asse t transfer veri f ica t io n \"units\" :[ 0-8 ], ( nu mber , required) display u n i ts , be t wee n 0 (i nte gral) a n d 8 (max precisio n ) \"reissuable\" :[ 0-1 ], ( nu mber , required) 1 =reissuable asse t \"has_ipfs\" :[ 0-1 ], ( nu mber , required) 1 =passi n g ip fs _hash \"ipfs_hash\" : \"hash\" , (s tr i n g , op t io nal ) a n ip fs hash f or discoveri n g asse t me ta da ta \"owner_change_address\" (s tr i n g , op t io nal ) t he address where t he ow ner t oke n will be se nt t o. I f n o t give n , i t will be se nt t o t he ou t pu t address } } or { (objec t ) A jso n objec t describi n g f ollow - o n asse t issue. \"reissue_restricted\" : { \"asset_name\" : \"asset-name\" , (s tr i n g , required) na me o f asse t t o be reissued \"asset_quantity\" : n , ( nu mber , required) t he nu mber o f raw u n i ts t o issue \"reissuable\" :[ 0-1 ], ( nu mber , op t io nal ) de fault is 1 , 1 =reissuable asse t \"verifier_string\" : \"text\" , (s tr i n g , op t io nal ) t he veri f ier s tr i n g t o be used f or a res tr ic te d asse t transfer veri f ica t io n \"ipfs_hash\" : \"hash\" , (s tr i n g , op t io nal ) A n ip fs hash f or discoveri n g asse t me ta da ta , Overrides t he curre nt ip fs hash i f give n \"owner_change_address\" (s tr i n g , op t io nal ) t he address where t he ow ner t oke n will be se nt t o. I f n o t give n , i t will be se nt t o t he ou t pu t address } } or { (objec t ) A jso n objec t describi n g a ne w quali f ier t o issue. \"issue_qualifier\" : { \"asset_name\" : \"asset_name\" , (s tr i n g , required) a quali f ier na me (s tarts wi t h '#') \"asset_quantity\" : n , ( nu meric , op t io nal , de fault = 1 ) t he nu mber o f u n i ts t o be issued ( 1 t o 10 ) \"has_ipfs\" :[ 0-1 ], (boolea n , op t io nal , de fault = false ) , whe t her i f ps hash is goi n g t o be added t o t he asse t \"ipfs_hash\" : \"hash\" , (s tr i n g , op t io nal bu t required i f has_ip fs = 1 ) , a n ip fs hash or a t xid hash o n ce RIP 5 is ac t iva te d \"root_change_address\" (s tr i n g , op t io nal ) O nl y applies whe n issui n g subquali f iers. The address where t he roo t quali f ier will be se nt . I f n o t speci f ied , i t will be se nt t o t he ou t pu t address. \"change_quantity\" : \"qty\" ( nu meric , op t io nal ) t he asse t cha n ge amou nt (de faults t o 1 ) } } or { (objec t ) A jso n objec t describi n g addresses t o be ta gged. The address i n t he key will used as t he asse t cha n ge address. \"tag_addresses\" : { \"qualifier\" : \"qualifier\" , (s tr i n g , required) a quali f ier na me (s tarts wi t h '#') \"addresses\" :[ \"addr\" , ... ], (array , required) t he addresses t o be ta gged (up t o 10 ) \"change_quantity\" : \"qty\" , ( nu meric , op t io nal ) t he asse t cha n ge amou nt (de faults t o 1 ) } } or { (objec t ) A jso n objec t describi n g addresses t o be u nta gged. The address i n t he key will be used as t he asse t cha n ge address. \"untag_addresses\" : { \"qualifier\" : \"qualifier\" , (s tr i n g , required) a quali f ier na me (s tarts wi t h '#') \"addresses\" :[ \"addr\" , ... ], (array , required) t he addresses t o be u nta gged (up t o 10 ) \"change_quantity\" : \"qty\" , ( nu meric , op t io nal ) t he asse t cha n ge amou nt (de faults t o 1 ) } } or { (objec t ) A jso n objec t describi n g addresses t o be fr oze n . The address i n t he key will used as t he ow ner cha n ge address. \"freeze_addresses\" : { \"asset_name\" : \"asset_name\" , (s tr i n g , required) a res tr ic te d asse t na me (s tarts wi t h '$') \"addresses\" :[ \"addr\" , ... ], (array , required) t he addresses t o be fr oze n (up t o 10 ) } } or { (objec t ) A jso n objec t describi n g addresses t o be fr oze n . The address i n t he key will be used as t he ow ner cha n ge address. \"unfreeze_addresses\" : { \"asset_name\" : \"asset_name\" , (s tr i n g , required) a res tr ic te d asse t na me (s tarts wi t h '$') \"addresses\" :[ \"addr\" , ... ], (array , required) t he addresses t o be u nta gged (up t o 10 ) } } or { (objec t ) A jso n objec t describi n g a n asse t t o be fr oze n . The address i n t he key will used as t he ow ner cha n ge address. \"freeze_asset\" : { \"asset_name\" : \"asset_name\" , (s tr i n g , required) a res tr ic te d asse t na me (s tarts wi t h '$') } } or { (objec t ) A jso n objec t describi n g a n asse t t o be fr oze n . The address i n t he key will be used as t he ow ner cha n ge address. \"unfreeze_asset\" : { \"asset_name\" : \"asset_name\" , (s tr i n g , required) a res tr ic te d asse t na me (s tarts wi t h '$') } } or \"data\" : \"hex\" (s tr i n g , required) The key is \"data\" , t he value is hex e n coded da ta , ... } 3. lock t ime ( nu meric , op t io nal , de fault = 0 ) Raw lock t ime. No n -0 value also lock t ime - ac t iva tes i n pu ts Result: \"transaction\" (string) hex string of the transaction Examples: avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\" \"{\\\"data\\\":\\\"00010203\\\"}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\" \"{\\\"RXissueAssetXXXXXXXXXXXXXXXXXhhZGt\\\":500,\\\"change_address\\\":change_amount,\\\"issuer_address\\\":{\\\"issue\\\":{\\\"asset_name\\\":\\\"MYASSET\\\",\\\"asset_quantity\\\":1000000,\\\"units\\\":1,\\\"reissuable\\\":0,\\\"has_ipfs\\\":1,\\\"ipfs_hash\\\":\\\"43f81c6f2c0593bde5a85e09ae662816eca80797\\\"}}}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\" \"{\\\"RXissueRestrictedXXXXXXXXXXXXzJZ1q\\\":1500,\\\"change_address\\\":change_amount,\\\"issuer_address\\\":{\\\"issue_restricted\\\":{\\\"asset_name\\\":\\\"$MYASSET\\\",\\\"asset_quantity\\\":1000000,\\\"verifier_string\\\":\\\"#TAG & !KYC\\\",\\\"units\\\":1,\\\"reissuable\\\":0,\\\"has_ipfs\\\":1,\\\"ipfs_hash\\\":\\\"43f81c6f2c0593bde5a85e09ae662816eca80797\\\"}}}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\" \"{\\\"RXissueUniqueAssetXXXXXXXXXXWEAe58\\\":20,\\\"change_address\\\":change_amount,\\\"issuer_address\\\":{\\\"issue_unique\\\":{\\\"root_name\\\":\\\"MYASSET\\\",\\\"asset_tags\\\":[\\\"ALPHA\\\",\\\"BETA\\\"],\\\"ipfs_hashes\\\":[\\\"43f81c6f2c0593bde5a85e09ae662816eca80797\\\",\\\"43f81c6f2c0593bde5a85e09ae662816eca80797\\\"]}}}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0},{\\\"txid\\\":\\\"myasset\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":{\\\"transfer\\\":{\\\"MYASSET\\\":50}}}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0},{\\\"txid\\\":\\\"myasset\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":{\\\"transferwithmessage\\\":{\\\"MYASSET\\\":50,\\\"message\\\":\\\"hash\\\",\\\"expire_time\\\": utc_time}}}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0},{\\\"txid\\\":\\\"myownership\\\",\\\"vout\\\":0}]\" \"{\\\"issuer_address\\\":{\\\"reissue\\\":{\\\"asset_name\\\":\\\"MYASSET\\\",\\\"asset_quantity\\\":2000000}}}\" curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\", \"{\\\"data\\\":\\\"00010203\\\"}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"createrawtransaction"},{"location":"flightplans/avian-library/raw_transactions/createrawtransaction/#createrawtransaction","text":"createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":(amount or object),\"data\":\"hex\",...} ( locktime ) ( replaceable ) Create a transaction spending the given inputs and creating new outputs. Outputs are addresses (paired with a AVN amount, data or object specifying an asset operation) or data. Returns hex-encoded raw transaction. Note Note that the transaction's inputs are not signed, and it is not stored in the wallet or transmitted to the network.","title":"createrawtransaction"},{"location":"flightplans/avian-library/raw_transactions/createrawtransaction/#paying-for-asset-operations","text":"Some operations require an amount of AVN to be sent to a burn address: Operation Amount + Burn Address transfer 0 transferwithmessage 0 issue 500 to n1issueAssetXXXXXXXXXXXXXXXXWdnemQ issue (subasset) 100 to n1issueSubAssetXXXXXXXXXXXXXbNiH6v issue_unique 5 to n1issueUniqueAssetXXXXXXXXXXS4695i reissue 100 to n1ReissueAssetXXXXXXXXXXXXXXWG9NLd issue_restricted 1500 to n1issueRestrictedXXXXXXXXXXXXZVT9V reissue_restricted 100 to n1ReissueAssetXXXXXXXXXXXXXXWG9NLd issue_qualifier 1000 to n1issueQuaLifierXXXXXXXXXXXXUysLTj issue_qualifier (sub) 100 to n1issueSubQuaLifierXXXXXXXXXYffPLh tag_addresses 0.1 to n1addTagBurnXXXXXXXXXXXXXXXXX5oLMH (per address) untag_addresses 0.1 to n1addTagBurnXXXXXXXXXXXXXXXXX5oLMH (per address) freeze_addresses 0 unfreeze_addresses 0 freeze_asset 0 unfreeze_asset 0","title":"Paying for Asset Operations:"},{"location":"flightplans/avian-library/raw_transactions/createrawtransaction/#assets-for-authorization","text":"These operations require a specific asset input for authorization: Root Owner Token: reissue issue_unique issue_restricted reissue_restricted freeze_addresses unfreeze_addresses freeze_asset unfreeze_asset Root Qualifier Token: issue_qualifier (when issuing subqualifier) Qualifier Token: tag_addresses untag_addresses","title":"Assets For Authorization:"},{"location":"flightplans/avian-library/raw_transactions/createrawtransaction/#output-ordering","text":"Asset operations require the following: 1) All coin outputs come first (including the burn output). 2) The owner token change output comes next (if required). 3) An issue, reissue, or any number of transfers comes last (different types can't be mixed in a single transaction).","title":"Output Ordering:"},{"location":"flightplans/avian-library/raw_transactions/createrawtransaction/#arguments","text":"1. \"inputs\" (array , required) A jso n array o f jso n objec ts [ { \"txid\" : \"id\" , (s tr i n g , required) The transa c t io n id \"vout\" : n , ( nu mber , required) The ou t pu t nu mber \"sequence\" : n ( nu mber , op t io nal ) The seque n ce nu mber } , ... ] 2. \"outputs\" (objec t , required) a jso n objec t wi t h ou t pu ts { \"address\" : (s tr i n g , required) The des t i nat io n avia n address. Each ou t pu t mus t have a di fferent address. x.xxx ( nu mber or s tr i n g , required) The AVN amou nt or { (objec t ) A jso n objec t o f asse ts t o se n d \"transfer\" : { \"asset-name\" : (s tr i n g , required) asse t na me asse t - qua nt i t y ( nu mber , required) t he nu mber o f raw u n i ts t o transfer , ... } } or { (objec t ) A jso n objec t o f describi n g t he transfer a n d message co ntents t o se n d \"transferwithmessage\" : { \"asset-name\" : (s tr i n g , required) asse t na me asse t - qua nt i t y , ( nu mber , required) t he nu mber o f raw u n i ts t o transfer \"message\" : \"hash\" , (s tr i n g , required) ip fs hash or a t xid hash \"expire_time\" : n ( nu mber , required) u t c t ime i n seco n ds t o expire t he message } } or { (objec t ) A jso n objec t describi n g ne w asse ts t o issue \"issue\" : { \"asset_name\" : \"asset-name\" , (s tr i n g , required) ne w asse t na me \"asset_quantity\" : n , ( nu mber , required) t he nu mber o f raw u n i ts t o issue \"units\" :[ 1-8 ], ( nu mber , required) display u n i ts , be t wee n 1 (i nte gral) t o 8 (max precisio n ) \"reissuable\" :[ 0-1 ], ( nu mber , required) 1 =reissuable asse t \"has_ipfs\" :[ 0-1 ], ( nu mber , required) 1 =passi n g ip fs _hash \"ipfs_hash\" : \"hash\" (s tr i n g , op t io nal ) a n ip fs hash f or discoveri n g asse t me ta da ta } } or { (objec t ) A jso n objec t describi n g ne w u n ique asse ts t o issue \"issue_unique\" : { \"root_name\" : \"root-name\" , (s tr i n g , required) na me o f t he asse t t he u n ique asse t (s) are bei n g issued u n der \"asset_tags\" :[ \"asset_tag\" , ... ], (array , required) t he u n ique ta g f or each asse t which is t o be issued \"ipfs_hashes\" :[ \"hash\" , ... ], (array , op t io nal ) ip fs hashes correspo n di n g t o each supplied ta g (should be same size as \"asset_tags\" ) } } or { (objec t ) A jso n objec t describi n g f ollow - o n asse t issue. \"reissue\" : { \"asset_name\" : \"asset-name\" , (s tr i n g , required) na me o f asse t t o be reissued \"asset_quantity\" : n , ( nu mber , required) t he nu mber o f raw u n i ts t o issue \"reissuable\" :[ 0-1 ], ( nu mber , op t io nal ) de fault is 1 , 1 =reissuable asse t \"ipfs_hash\" : \"hash\" , (s tr i n g , op t io nal ) A n ip fs hash f or discoveri n g asse t me ta da ta , Overrides t he curre nt ip fs hash i f give n \"owner_change_address\" (s tr i n g , op t io nal ) t he address where t he ow ner t oke n will be se nt t o. I f n o t give n , i t will be se nt t o t he ou t pu t address } } or { (objec t ) A jso n objec t describi n g how res tr ic te d asse t t o issue \"issue_restricted\" : { \"asset_name\" : \"asset-name\" , (s tr i n g , required) ne w asse t na me \"asset_quantity\" : n , ( nu mber , required) t he nu mber o f raw u n i ts t o issue \"verifier_string\" : \"text\" , (s tr i n g , required) t he veri f ier s tr i n g t o be used f or a res tr ic te d asse t transfer veri f ica t io n \"units\" :[ 0-8 ], ( nu mber , required) display u n i ts , be t wee n 0 (i nte gral) a n d 8 (max precisio n ) \"reissuable\" :[ 0-1 ], ( nu mber , required) 1 =reissuable asse t \"has_ipfs\" :[ 0-1 ], ( nu mber , required) 1 =passi n g ip fs _hash \"ipfs_hash\" : \"hash\" , (s tr i n g , op t io nal ) a n ip fs hash f or discoveri n g asse t me ta da ta \"owner_change_address\" (s tr i n g , op t io nal ) t he address where t he ow ner t oke n will be se nt t o. I f n o t give n , i t will be se nt t o t he ou t pu t address } } or { (objec t ) A jso n objec t describi n g f ollow - o n asse t issue. \"reissue_restricted\" : { \"asset_name\" : \"asset-name\" , (s tr i n g , required) na me o f asse t t o be reissued \"asset_quantity\" : n , ( nu mber , required) t he nu mber o f raw u n i ts t o issue \"reissuable\" :[ 0-1 ], ( nu mber , op t io nal ) de fault is 1 , 1 =reissuable asse t \"verifier_string\" : \"text\" , (s tr i n g , op t io nal ) t he veri f ier s tr i n g t o be used f or a res tr ic te d asse t transfer veri f ica t io n \"ipfs_hash\" : \"hash\" , (s tr i n g , op t io nal ) A n ip fs hash f or discoveri n g asse t me ta da ta , Overrides t he curre nt ip fs hash i f give n \"owner_change_address\" (s tr i n g , op t io nal ) t he address where t he ow ner t oke n will be se nt t o. I f n o t give n , i t will be se nt t o t he ou t pu t address } } or { (objec t ) A jso n objec t describi n g a ne w quali f ier t o issue. \"issue_qualifier\" : { \"asset_name\" : \"asset_name\" , (s tr i n g , required) a quali f ier na me (s tarts wi t h '#') \"asset_quantity\" : n , ( nu meric , op t io nal , de fault = 1 ) t he nu mber o f u n i ts t o be issued ( 1 t o 10 ) \"has_ipfs\" :[ 0-1 ], (boolea n , op t io nal , de fault = false ) , whe t her i f ps hash is goi n g t o be added t o t he asse t \"ipfs_hash\" : \"hash\" , (s tr i n g , op t io nal bu t required i f has_ip fs = 1 ) , a n ip fs hash or a t xid hash o n ce RIP 5 is ac t iva te d \"root_change_address\" (s tr i n g , op t io nal ) O nl y applies whe n issui n g subquali f iers. The address where t he roo t quali f ier will be se nt . I f n o t speci f ied , i t will be se nt t o t he ou t pu t address. \"change_quantity\" : \"qty\" ( nu meric , op t io nal ) t he asse t cha n ge amou nt (de faults t o 1 ) } } or { (objec t ) A jso n objec t describi n g addresses t o be ta gged. The address i n t he key will used as t he asse t cha n ge address. \"tag_addresses\" : { \"qualifier\" : \"qualifier\" , (s tr i n g , required) a quali f ier na me (s tarts wi t h '#') \"addresses\" :[ \"addr\" , ... ], (array , required) t he addresses t o be ta gged (up t o 10 ) \"change_quantity\" : \"qty\" , ( nu meric , op t io nal ) t he asse t cha n ge amou nt (de faults t o 1 ) } } or { (objec t ) A jso n objec t describi n g addresses t o be u nta gged. The address i n t he key will be used as t he asse t cha n ge address. \"untag_addresses\" : { \"qualifier\" : \"qualifier\" , (s tr i n g , required) a quali f ier na me (s tarts wi t h '#') \"addresses\" :[ \"addr\" , ... ], (array , required) t he addresses t o be u nta gged (up t o 10 ) \"change_quantity\" : \"qty\" , ( nu meric , op t io nal ) t he asse t cha n ge amou nt (de faults t o 1 ) } } or { (objec t ) A jso n objec t describi n g addresses t o be fr oze n . The address i n t he key will used as t he ow ner cha n ge address. \"freeze_addresses\" : { \"asset_name\" : \"asset_name\" , (s tr i n g , required) a res tr ic te d asse t na me (s tarts wi t h '$') \"addresses\" :[ \"addr\" , ... ], (array , required) t he addresses t o be fr oze n (up t o 10 ) } } or { (objec t ) A jso n objec t describi n g addresses t o be fr oze n . The address i n t he key will be used as t he ow ner cha n ge address. \"unfreeze_addresses\" : { \"asset_name\" : \"asset_name\" , (s tr i n g , required) a res tr ic te d asse t na me (s tarts wi t h '$') \"addresses\" :[ \"addr\" , ... ], (array , required) t he addresses t o be u nta gged (up t o 10 ) } } or { (objec t ) A jso n objec t describi n g a n asse t t o be fr oze n . The address i n t he key will used as t he ow ner cha n ge address. \"freeze_asset\" : { \"asset_name\" : \"asset_name\" , (s tr i n g , required) a res tr ic te d asse t na me (s tarts wi t h '$') } } or { (objec t ) A jso n objec t describi n g a n asse t t o be fr oze n . The address i n t he key will be used as t he ow ner cha n ge address. \"unfreeze_asset\" : { \"asset_name\" : \"asset_name\" , (s tr i n g , required) a res tr ic te d asse t na me (s tarts wi t h '$') } } or \"data\" : \"hex\" (s tr i n g , required) The key is \"data\" , t he value is hex e n coded da ta , ... } 3. lock t ime ( nu meric , op t io nal , de fault = 0 ) Raw lock t ime. No n -0 value also lock t ime - ac t iva tes i n pu ts","title":"Arguments:"},{"location":"flightplans/avian-library/raw_transactions/createrawtransaction/#result","text":"\"transaction\" (string) hex string of the transaction","title":"Result:"},{"location":"flightplans/avian-library/raw_transactions/createrawtransaction/#examples","text":"avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\" \"{\\\"data\\\":\\\"00010203\\\"}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\" \"{\\\"RXissueAssetXXXXXXXXXXXXXXXXXhhZGt\\\":500,\\\"change_address\\\":change_amount,\\\"issuer_address\\\":{\\\"issue\\\":{\\\"asset_name\\\":\\\"MYASSET\\\",\\\"asset_quantity\\\":1000000,\\\"units\\\":1,\\\"reissuable\\\":0,\\\"has_ipfs\\\":1,\\\"ipfs_hash\\\":\\\"43f81c6f2c0593bde5a85e09ae662816eca80797\\\"}}}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\" \"{\\\"RXissueRestrictedXXXXXXXXXXXXzJZ1q\\\":1500,\\\"change_address\\\":change_amount,\\\"issuer_address\\\":{\\\"issue_restricted\\\":{\\\"asset_name\\\":\\\"$MYASSET\\\",\\\"asset_quantity\\\":1000000,\\\"verifier_string\\\":\\\"#TAG & !KYC\\\",\\\"units\\\":1,\\\"reissuable\\\":0,\\\"has_ipfs\\\":1,\\\"ipfs_hash\\\":\\\"43f81c6f2c0593bde5a85e09ae662816eca80797\\\"}}}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\" \"{\\\"RXissueUniqueAssetXXXXXXXXXXWEAe58\\\":20,\\\"change_address\\\":change_amount,\\\"issuer_address\\\":{\\\"issue_unique\\\":{\\\"root_name\\\":\\\"MYASSET\\\",\\\"asset_tags\\\":[\\\"ALPHA\\\",\\\"BETA\\\"],\\\"ipfs_hashes\\\":[\\\"43f81c6f2c0593bde5a85e09ae662816eca80797\\\",\\\"43f81c6f2c0593bde5a85e09ae662816eca80797\\\"]}}}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0},{\\\"txid\\\":\\\"myasset\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":{\\\"transfer\\\":{\\\"MYASSET\\\":50}}}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0},{\\\"txid\\\":\\\"myasset\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":{\\\"transferwithmessage\\\":{\\\"MYASSET\\\":50,\\\"message\\\":\\\"hash\\\",\\\"expire_time\\\": utc_time}}}\" avian-cli createrawtransaction \"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0},{\\\"txid\\\":\\\"myownership\\\",\\\"vout\\\":0}]\" \"{\\\"issuer_address\\\":{\\\"reissue\\\":{\\\"asset_name\\\":\\\"MYASSET\\\",\\\"asset_quantity\\\":2000000}}}\" curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"mycoin\\\",\\\"vout\\\":0}]\", \"{\\\"data\\\":\\\"00010203\\\"}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"Examples:"},{"location":"flightplans/avian-library/raw_transactions/decoderawtransaction/","text":"decoderawtransaction Return a JSON object representing the serialized, hex-encoded transaction. Arguments: 1. \"hexstring\" (string, required) The transaction hex string Result: { \"txid\" : \"id\" , (s tr i n g) The transa c t io n id \"hash\" : \"id\" , (s tr i n g) The transa c t io n hash (di ffers fr om t xid f or wi tness transa c t io ns ) \"size\" : n , ( nu meric) The transa c t io n size \"vsize\" : n , ( nu meric) The vir tual transa c t io n size (di ffers fr om size f or wi tness transa c t io ns ) \"version\" : n , ( nu meric) The versio n \"locktime\" : ttt , ( nu meric) The lock t ime \"vin\" : [ (array o f jso n objec ts ) { \"txid\" : \"id\" , (s tr i n g) The transa c t io n id \"vout\" : n , ( nu meric) The ou t pu t nu mber \"scriptSig\" : { (jso n objec t ) The scrip t \"asm\" : \"asm\" , (s tr i n g) asm \"hex\" : \"hex\" (s tr i n g) hex }, \"txinwitness\" : [ \"hex\" , ... ] (array o f s tr i n g) hex -e n coded wi tness da ta (i f a n y) \"sequence\" : n ( nu meric) The scrip t seque n ce nu mber } , ... ], \"vout\" : [ (array o f jso n objec ts ) { \"value\" : x.xxx , ( nu meric) The value i n AVN \"n\" : n , ( nu meric) i n dex \"scriptPubKey\" : { (jso n objec t ) \"asm\" : \"asm\" , (s tr i n g) t he asm \"hex\" : \"hex\" , (s tr i n g) t he hex \"reqSigs\" : n , ( nu meric) The required sigs \"type\" : \"pubkeyhash\" , (s tr i n g) The t ype , eg 'pubkeyhash' \"asset\" : { (jso n objec t ) op t io nal \"name\" : \"name\" , (s tr i n g) t he asse t na me \"amount\" : n , ( nu meric) t he amou nt o f asse t t ha t was se nt \"message\" : \"message\" , (s tr i n g op t io nal ) t he message i f o ne was se nt \"expire_time\" : n , ( nu meric op t io nal ) t he message epoch expira t io n t ime i f o ne was se t \"addresses\" : [ (jso n array o f s tr i n g) \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\" (s tr i n g) avia n address , ... ] } } , ... ], } Examples: avian-cli decoderawtransaction \"hexstring\"","title":"decoderawtransaction"},{"location":"flightplans/avian-library/raw_transactions/decoderawtransaction/#decoderawtransaction","text":"Return a JSON object representing the serialized, hex-encoded transaction.","title":"decoderawtransaction"},{"location":"flightplans/avian-library/raw_transactions/decoderawtransaction/#arguments","text":"1. \"hexstring\" (string, required) The transaction hex string","title":"Arguments:"},{"location":"flightplans/avian-library/raw_transactions/decoderawtransaction/#result","text":"{ \"txid\" : \"id\" , (s tr i n g) The transa c t io n id \"hash\" : \"id\" , (s tr i n g) The transa c t io n hash (di ffers fr om t xid f or wi tness transa c t io ns ) \"size\" : n , ( nu meric) The transa c t io n size \"vsize\" : n , ( nu meric) The vir tual transa c t io n size (di ffers fr om size f or wi tness transa c t io ns ) \"version\" : n , ( nu meric) The versio n \"locktime\" : ttt , ( nu meric) The lock t ime \"vin\" : [ (array o f jso n objec ts ) { \"txid\" : \"id\" , (s tr i n g) The transa c t io n id \"vout\" : n , ( nu meric) The ou t pu t nu mber \"scriptSig\" : { (jso n objec t ) The scrip t \"asm\" : \"asm\" , (s tr i n g) asm \"hex\" : \"hex\" (s tr i n g) hex }, \"txinwitness\" : [ \"hex\" , ... ] (array o f s tr i n g) hex -e n coded wi tness da ta (i f a n y) \"sequence\" : n ( nu meric) The scrip t seque n ce nu mber } , ... ], \"vout\" : [ (array o f jso n objec ts ) { \"value\" : x.xxx , ( nu meric) The value i n AVN \"n\" : n , ( nu meric) i n dex \"scriptPubKey\" : { (jso n objec t ) \"asm\" : \"asm\" , (s tr i n g) t he asm \"hex\" : \"hex\" , (s tr i n g) t he hex \"reqSigs\" : n , ( nu meric) The required sigs \"type\" : \"pubkeyhash\" , (s tr i n g) The t ype , eg 'pubkeyhash' \"asset\" : { (jso n objec t ) op t io nal \"name\" : \"name\" , (s tr i n g) t he asse t na me \"amount\" : n , ( nu meric) t he amou nt o f asse t t ha t was se nt \"message\" : \"message\" , (s tr i n g op t io nal ) t he message i f o ne was se nt \"expire_time\" : n , ( nu meric op t io nal ) t he message epoch expira t io n t ime i f o ne was se t \"addresses\" : [ (jso n array o f s tr i n g) \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\" (s tr i n g) avia n address , ... ] } } , ... ], }","title":"Result:"},{"location":"flightplans/avian-library/raw_transactions/decoderawtransaction/#examples","text":"avian-cli decoderawtransaction \"hexstring\"","title":"Examples:"},{"location":"flightplans/avian-library/raw_transactions/decodescript/","text":"decodescript Decode a hex-encoded script. Arguments: 1. \"hexstring\" (string) the hex encoded script Result: { \"asm\":\"asm\", (string) Script public key \"hex\":\"hex\", (string) hex encoded public key \"type\":\"type\", (string) The output type \"asset\" : { (json object) optional \"name\" : \"name\", (string) the asset name \"amount\" : n, (numeric) the amount of asset that was sent \"message\" : \"message\", (string optional) the message if one was sent \"expire_time\" : n, (numeric optional ) the message epoch expiration time if one was set \"reqSigs\": n, (numeric) The required signatures \"addresses\": [ (json array of string) \"address\" (string) avian address ,... ], \"p2sh\":\"address\", (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH). \"(The following only appears if the script is an asset script) \"asset_name\":\"name\", (string) Name of the asset. \"amount\":\"x.xx\", (numeric) The amount of assets interacted with. \"units\": n, (numeric) The units of the asset. (Only appears in the type (new_asset)) \"reissuable\": true|false, (boolean) If this asset is reissuable. (Only appears in type (new_asset|reissue_asset)) \"hasIPFS\": true|false, (boolean) If this asset has an IPFS hash. (Only appears in type (new_asset if hasIPFS is true)) \"ipfs_hash\": \"hash\", (string) The ipfs hash for the new asset. (Only appears in type (new_asset)) \"new_ipfs_hash\":\"hash\", (string) If new ipfs hash (Only appears in type. (reissue_asset)) } Examples: avian-cli decodescript \"hexstring\"","title":"decodescript"},{"location":"flightplans/avian-library/raw_transactions/decodescript/#decodescript","text":"Decode a hex-encoded script.","title":"decodescript"},{"location":"flightplans/avian-library/raw_transactions/decodescript/#arguments","text":"1. \"hexstring\" (string) the hex encoded script","title":"Arguments:"},{"location":"flightplans/avian-library/raw_transactions/decodescript/#result","text":"{ \"asm\":\"asm\", (string) Script public key \"hex\":\"hex\", (string) hex encoded public key \"type\":\"type\", (string) The output type \"asset\" : { (json object) optional \"name\" : \"name\", (string) the asset name \"amount\" : n, (numeric) the amount of asset that was sent \"message\" : \"message\", (string optional) the message if one was sent \"expire_time\" : n, (numeric optional ) the message epoch expiration time if one was set \"reqSigs\": n, (numeric) The required signatures \"addresses\": [ (json array of string) \"address\" (string) avian address ,... ], \"p2sh\":\"address\", (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH). \"(The following only appears if the script is an asset script) \"asset_name\":\"name\", (string) Name of the asset. \"amount\":\"x.xx\", (numeric) The amount of assets interacted with. \"units\": n, (numeric) The units of the asset. (Only appears in the type (new_asset)) \"reissuable\": true|false, (boolean) If this asset is reissuable. (Only appears in type (new_asset|reissue_asset)) \"hasIPFS\": true|false, (boolean) If this asset has an IPFS hash. (Only appears in type (new_asset if hasIPFS is true)) \"ipfs_hash\": \"hash\", (string) The ipfs hash for the new asset. (Only appears in type (new_asset)) \"new_ipfs_hash\":\"hash\", (string) If new ipfs hash (Only appears in type. (reissue_asset)) }","title":"Result:"},{"location":"flightplans/avian-library/raw_transactions/decodescript/#examples","text":"avian-cli decodescript \"hexstring\"","title":"Examples:"},{"location":"flightplans/avian-library/raw_transactions/fundrawtransaction/","text":"fundrawtransaction rawtransaction \"hexstring\" ( options ) Add inputs to a transaction until it has enough in value to meet its out value. This will not modify existing inputs, and will add at most one change output to the outputs. No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified. Note Note that inputs which were signed may need to be resigned after completion since in/outputs have been added. The inputs added will not be signed, use signrawtransaction for that. Note Note that all existing inputs must have their previous output transaction be in the wallet. Note Note that all inputs selected must be of standard form and P2SH scripts must be in the wallet using importaddress or addmultisigaddress (to calculate fees). You can see whether this is the case by checking the \"solvable\" field in the listunspent output. Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only Arguments: 1. \"hexstring\" (string, required) The hex string of the raw transaction 2. options (object, optional) { \"changeAddress\" (string, optional, default pool address) The avian address to receive the change \"changePosition\" (numeric, optional, default random) The index of the change output \"includeWatching\" (boolean, optional, default false) Also select inputs which are watch only \"lockUnspents\" (boolean, optional, default false) Lock selected unspent outputs \"feeRate\" (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in AVN/kB \"subtractFeeFromOutputs\" (array, optional) A json array of integers. The fee will be equally deducted from the amount of each specified output. The outputs are specified by their zero-based index, before any change output is added. Those recipients will receive less avians than you enter in their corresponding amount field. If no outputs are specified here, the sender pays the fee. [vout_index,...] Allows this transaction to be replaced by a transaction with higher fees \"conf_target\" (numeric, optional) Confirmation target (in blocks) \"estimate_mode\" (string, optional, default=UNSET) The fee estimate mode, must be one of: \"UNSET\" \"ECONOMICAL\" \"CONSERVATIVE\" } for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true} Result: { \"hex\": \"value\", (string) The resulting raw transaction (hex-encoded string) \"fee\": n, (numeric) Fee in AVN the resulting transaction pays \"changepos\": n (numeric) The position of the added change output, or -1 } Examples: Create a transaction with no inputs avian-cli createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\" Add sufficient unsigned inputs to meet the output value avian-cli fundrawtransaction \"rawtransactionhex\" Sign the transaction avian-cli signrawtransaction \"fundedtransactionhex\" Send the transaction avian-cli sendrawtransaction \"signedtransactionhex\"","title":"fundrawtransaction"},{"location":"flightplans/avian-library/raw_transactions/fundrawtransaction/#fundrawtransaction","text":"rawtransaction \"hexstring\" ( options ) Add inputs to a transaction until it has enough in value to meet its out value. This will not modify existing inputs, and will add at most one change output to the outputs. No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified. Note Note that inputs which were signed may need to be resigned after completion since in/outputs have been added. The inputs added will not be signed, use signrawtransaction for that. Note Note that all existing inputs must have their previous output transaction be in the wallet. Note Note that all inputs selected must be of standard form and P2SH scripts must be in the wallet using importaddress or addmultisigaddress (to calculate fees). You can see whether this is the case by checking the \"solvable\" field in the listunspent output. Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only","title":"fundrawtransaction"},{"location":"flightplans/avian-library/raw_transactions/fundrawtransaction/#arguments","text":"1. \"hexstring\" (string, required) The hex string of the raw transaction 2. options (object, optional) { \"changeAddress\" (string, optional, default pool address) The avian address to receive the change \"changePosition\" (numeric, optional, default random) The index of the change output \"includeWatching\" (boolean, optional, default false) Also select inputs which are watch only \"lockUnspents\" (boolean, optional, default false) Lock selected unspent outputs \"feeRate\" (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in AVN/kB \"subtractFeeFromOutputs\" (array, optional) A json array of integers. The fee will be equally deducted from the amount of each specified output. The outputs are specified by their zero-based index, before any change output is added. Those recipients will receive less avians than you enter in their corresponding amount field. If no outputs are specified here, the sender pays the fee. [vout_index,...] Allows this transaction to be replaced by a transaction with higher fees \"conf_target\" (numeric, optional) Confirmation target (in blocks) \"estimate_mode\" (string, optional, default=UNSET) The fee estimate mode, must be one of: \"UNSET\" \"ECONOMICAL\" \"CONSERVATIVE\" } for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}","title":"Arguments:"},{"location":"flightplans/avian-library/raw_transactions/fundrawtransaction/#result","text":"{ \"hex\": \"value\", (string) The resulting raw transaction (hex-encoded string) \"fee\": n, (numeric) Fee in AVN the resulting transaction pays \"changepos\": n (numeric) The position of the added change output, or -1 }","title":"Result:"},{"location":"flightplans/avian-library/raw_transactions/fundrawtransaction/#examples","text":"","title":"Examples:"},{"location":"flightplans/avian-library/raw_transactions/fundrawtransaction/#create-a-transaction-with-no-inputs","text":"avian-cli createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"","title":"Create a transaction with no inputs"},{"location":"flightplans/avian-library/raw_transactions/fundrawtransaction/#add-sufficient-unsigned-inputs-to-meet-the-output-value","text":"avian-cli fundrawtransaction \"rawtransactionhex\"","title":"Add sufficient unsigned inputs to meet the output value"},{"location":"flightplans/avian-library/raw_transactions/fundrawtransaction/#sign-the-transaction","text":"avian-cli signrawtransaction \"fundedtransactionhex\"","title":"Sign the transaction"},{"location":"flightplans/avian-library/raw_transactions/fundrawtransaction/#send-the-transaction","text":"avian-cli sendrawtransaction \"signedtransactionhex\"","title":"Send the transaction"},{"location":"flightplans/avian-library/raw_transactions/getrawtransaction/","text":"getrawtransaction Note NOTE: By default this function only works for mempool transactions. If the -txindex option is enabled, it also works for blockchain transactions. Warning DEPRECATED: for now, it also works for transactions with unspent outputs. Return the raw transaction data. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'. Arguments: 1. \"txid\" (string, required) The transaction id 2. verbose (bool, optional, default=false) If false, return a string, otherwise return a json object Result (if verbose is not set or set to false): \"data\" (string) The serialized, hex-encoded data for 'txid' Result (if verbose is set to true): { \"hex\" : \"data\" , (s tr i n g) The serialized , hex -e n coded da ta f or ' t xid' \"txid\" : \"id\" , (s tr i n g) The transa c t io n id (same as provided) \"hash\" : \"id\" , (s tr i n g) The transa c t io n hash (di ffers fr om t xid f or wi tness transa c t io ns ) \"size\" : n , ( nu meric) The serialized transa c t io n size \"vsize\" : n , ( nu meric) The vir tual transa c t io n size (di ffers fr om size f or wi tness transa c t io ns ) \"version\" : n , ( nu meric) The versio n \"locktime\" : ttt , ( nu meric) The lock t ime \"vin\" : [ (array o f jso n objec ts ) { \"txid\" : \"id\" , (s tr i n g) The transa c t io n id \"vout\" : n , ( nu meric) \"scriptSig\" : { (jso n objec t ) The scrip t \"asm\" : \"asm\" , (s tr i n g) asm \"hex\" : \"hex\" (s tr i n g) hex }, \"sequence\" : n ( nu meric) The scrip t seque n ce nu mber \"txinwitness\" : [ \"hex\" , ... ] (array o f s tr i n g) hex -e n coded wi tness da ta (i f a n y) } , ... ], \"vout\" : [ (array o f jso n objec ts ) { \"value\" : x.xxx , ( nu meric) The value i n AVN \"n\" : n , ( nu meric) i n dex \"scriptPubKey\" : { (jso n objec t ) \"asm\" : \"asm\" , (s tr i n g) t he asm \"hex\" : \"hex\" , (s tr i n g) t he hex \"reqSigs\" : n , ( nu meric) The required sigs \"type\" : \"pubkeyhash\" , (s tr i n g) The t ype , eg 'pubkeyhash' \"addresses\" : [ (jso n array o f s tr i n g) \"address\" (s tr i n g) avia n address , ... ] } } , ... ], \"blockhash\" : \"hash\" , (s tr i n g) t he block hash \"confirmations\" : n , ( nu meric) The co nf irma t io ns \"time\" : ttt , ( nu meric) The transa c t io n t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) \"blocktime\" : ttt ( nu meric) The block t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) } Examples: avian-cli getrawtransaction \"mytxid\" avian-cli getrawtransaction \"mytxid\" true","title":"getrawtransaction"},{"location":"flightplans/avian-library/raw_transactions/getrawtransaction/#getrawtransaction","text":"Note NOTE: By default this function only works for mempool transactions. If the -txindex option is enabled, it also works for blockchain transactions. Warning DEPRECATED: for now, it also works for transactions with unspent outputs. Return the raw transaction data. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.","title":"getrawtransaction"},{"location":"flightplans/avian-library/raw_transactions/getrawtransaction/#arguments","text":"1. \"txid\" (string, required) The transaction id 2. verbose (bool, optional, default=false) If false, return a string, otherwise return a json object","title":"Arguments:"},{"location":"flightplans/avian-library/raw_transactions/getrawtransaction/#result-if-verbose-is-not-set-or-set-to-false","text":"\"data\" (string) The serialized, hex-encoded data for 'txid'","title":"Result (if verbose is not set or set to false):"},{"location":"flightplans/avian-library/raw_transactions/getrawtransaction/#result-if-verbose-is-set-to-true","text":"{ \"hex\" : \"data\" , (s tr i n g) The serialized , hex -e n coded da ta f or ' t xid' \"txid\" : \"id\" , (s tr i n g) The transa c t io n id (same as provided) \"hash\" : \"id\" , (s tr i n g) The transa c t io n hash (di ffers fr om t xid f or wi tness transa c t io ns ) \"size\" : n , ( nu meric) The serialized transa c t io n size \"vsize\" : n , ( nu meric) The vir tual transa c t io n size (di ffers fr om size f or wi tness transa c t io ns ) \"version\" : n , ( nu meric) The versio n \"locktime\" : ttt , ( nu meric) The lock t ime \"vin\" : [ (array o f jso n objec ts ) { \"txid\" : \"id\" , (s tr i n g) The transa c t io n id \"vout\" : n , ( nu meric) \"scriptSig\" : { (jso n objec t ) The scrip t \"asm\" : \"asm\" , (s tr i n g) asm \"hex\" : \"hex\" (s tr i n g) hex }, \"sequence\" : n ( nu meric) The scrip t seque n ce nu mber \"txinwitness\" : [ \"hex\" , ... ] (array o f s tr i n g) hex -e n coded wi tness da ta (i f a n y) } , ... ], \"vout\" : [ (array o f jso n objec ts ) { \"value\" : x.xxx , ( nu meric) The value i n AVN \"n\" : n , ( nu meric) i n dex \"scriptPubKey\" : { (jso n objec t ) \"asm\" : \"asm\" , (s tr i n g) t he asm \"hex\" : \"hex\" , (s tr i n g) t he hex \"reqSigs\" : n , ( nu meric) The required sigs \"type\" : \"pubkeyhash\" , (s tr i n g) The t ype , eg 'pubkeyhash' \"addresses\" : [ (jso n array o f s tr i n g) \"address\" (s tr i n g) avia n address , ... ] } } , ... ], \"blockhash\" : \"hash\" , (s tr i n g) t he block hash \"confirmations\" : n , ( nu meric) The co nf irma t io ns \"time\" : ttt , ( nu meric) The transa c t io n t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) \"blocktime\" : ttt ( nu meric) The block t ime i n seco n ds si n ce epoch (Ja n 1 1970 GMT) }","title":"Result (if verbose is set to true):"},{"location":"flightplans/avian-library/raw_transactions/getrawtransaction/#examples","text":"avian-cli getrawtransaction \"mytxid\" avian-cli getrawtransaction \"mytxid\" true","title":"Examples:"},{"location":"flightplans/avian-library/raw_transactions/sendrawtransaction/","text":"sendrawtransaction Submits raw transaction (serialized, hex-encoded) to local node and network. Also see createrawtransaction and signrawtransaction calls. Arguments: 1. \"hexstring\" (string, required) The hex string of the raw transaction) 2. allowhighfees (boolean, optional, default=false) Allow high fees Result: \"hex\" (string) The transaction hash in hex Examples: Create a transaction avian-cli createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\" Sign the transaction, and get back the hex avian-cli signrawtransaction \"myhex\" Send the transaction (signed hex) avian-cli sendrawtransaction \"signedhex\" As a json rpc call curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"sendrawtransaction"},{"location":"flightplans/avian-library/raw_transactions/sendrawtransaction/#sendrawtransaction","text":"Submits raw transaction (serialized, hex-encoded) to local node and network. Also see createrawtransaction and signrawtransaction calls.","title":"sendrawtransaction"},{"location":"flightplans/avian-library/raw_transactions/sendrawtransaction/#arguments","text":"1. \"hexstring\" (string, required) The hex string of the raw transaction) 2. allowhighfees (boolean, optional, default=false) Allow high fees","title":"Arguments:"},{"location":"flightplans/avian-library/raw_transactions/sendrawtransaction/#result","text":"\"hex\" (string) The transaction hash in hex","title":"Result:"},{"location":"flightplans/avian-library/raw_transactions/sendrawtransaction/#examples","text":"","title":"Examples:"},{"location":"flightplans/avian-library/raw_transactions/sendrawtransaction/#create-a-transaction","text":"avian-cli createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\"","title":"Create a transaction"},{"location":"flightplans/avian-library/raw_transactions/sendrawtransaction/#sign-the-transaction-and-get-back-the-hex","text":"avian-cli signrawtransaction \"myhex\"","title":"Sign the transaction, and get back the hex"},{"location":"flightplans/avian-library/raw_transactions/sendrawtransaction/#send-the-transaction-signed-hex","text":"avian-cli sendrawtransaction \"signedhex\"","title":"Send the transaction (signed hex)"},{"location":"flightplans/avian-library/raw_transactions/sendrawtransaction/#as-a-json-rpc-call","text":"curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8766/","title":"As a json rpc call"},{"location":"flightplans/avian-library/raw_transactions/signrawtransaction/","text":"signrawtransaction signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype ) Sign inputs for raw transaction (serialized, hex-encoded). The second optional argument (may be null) is an array of previous transaction outputs that this transaction depends on but may not yet be in the block chain. The third optional argument (may be null) is an array of base58-encoded private keys that, if given, will be the only keys used to sign the transaction. Note Requires wallet passphrase to be set with walletpassphrase call. Arguments: 1. \"hexstring\" (string, required) The transaction hex string 2. \"prevtxs\" (string, optional) An json array of previous dependent transaction outputs [ (json array of json objects, or 'null' if none provided) { \"txid\":\"id\", (string, required) The transaction id \"vout\":n, (numeric, required) The output number \"scriptPubKey\": \"hex\", (string, required) script key \"redeemScript\": \"hex\", (string, required for P2SH or P2WSH) redeem script \"amount\": value (numeric, required) The amount spent } ,... ] 3. \"privkeys\" (string, optional) A json array of base58-encoded private keys for signing [ (json array of strings, or 'null' if none provided) \"privatekey\" (string) private key in base58-encoding ,... ] 4. \"sighashtype\" (string, optional, default=ALL) The signature hash type. Must be one of \"ALL\" \"NONE\" \"SINGLE\" \"ALL|ANYONECANPAY\" \"NONE|ANYONECANPAY\" \"SINGLE|ANYONECANPAY\" Result: { \"hex\" : \"value\" , (s tr i n g) The hex -e n coded raw transa c t io n wi t h sig nature (s) \"complete\" : true | false , (boolea n ) I f t he transa c t io n has a comple te se t o f sig natures \"errors\" : [ (jso n array o f objec ts ) Scrip t veri f ica t io n errors (i f t here are a n y) { \"txid\" : \"hash\" , (s tr i n g) The hash o f t he re feren ced , previous transa c t io n \"vout\" : n , ( nu meric) The i n dex o f t he ou t pu t t o spe nt a n d used as i n pu t \"scriptSig\" : \"hex\" , (s tr i n g) The hex -e n coded sig nature scrip t \"sequence\" : n , ( nu meric) Scrip t seque n ce nu mber \"error\" : \"text\" (s tr i n g) Veri f ica t io n or sig n i n g error rela te d t o t he i n pu t } , ... ] } Examples: avian-cli signrawtransaction \"myhex\"","title":"signrawtransaction"},{"location":"flightplans/avian-library/raw_transactions/signrawtransaction/#signrawtransaction","text":"signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype ) Sign inputs for raw transaction (serialized, hex-encoded). The second optional argument (may be null) is an array of previous transaction outputs that this transaction depends on but may not yet be in the block chain. The third optional argument (may be null) is an array of base58-encoded private keys that, if given, will be the only keys used to sign the transaction. Note Requires wallet passphrase to be set with walletpassphrase call.","title":"signrawtransaction"},{"location":"flightplans/avian-library/raw_transactions/signrawtransaction/#arguments","text":"1. \"hexstring\" (string, required) The transaction hex string 2. \"prevtxs\" (string, optional) An json array of previous dependent transaction outputs [ (json array of json objects, or 'null' if none provided) { \"txid\":\"id\", (string, required) The transaction id \"vout\":n, (numeric, required) The output number \"scriptPubKey\": \"hex\", (string, required) script key \"redeemScript\": \"hex\", (string, required for P2SH or P2WSH) redeem script \"amount\": value (numeric, required) The amount spent } ,... ] 3. \"privkeys\" (string, optional) A json array of base58-encoded private keys for signing [ (json array of strings, or 'null' if none provided) \"privatekey\" (string) private key in base58-encoding ,... ] 4. \"sighashtype\" (string, optional, default=ALL) The signature hash type. Must be one of \"ALL\" \"NONE\" \"SINGLE\" \"ALL|ANYONECANPAY\" \"NONE|ANYONECANPAY\" \"SINGLE|ANYONECANPAY\"","title":"Arguments:"},{"location":"flightplans/avian-library/raw_transactions/signrawtransaction/#result","text":"{ \"hex\" : \"value\" , (s tr i n g) The hex -e n coded raw transa c t io n wi t h sig nature (s) \"complete\" : true | false , (boolea n ) I f t he transa c t io n has a comple te se t o f sig natures \"errors\" : [ (jso n array o f objec ts ) Scrip t veri f ica t io n errors (i f t here are a n y) { \"txid\" : \"hash\" , (s tr i n g) The hash o f t he re feren ced , previous transa c t io n \"vout\" : n , ( nu meric) The i n dex o f t he ou t pu t t o spe nt a n d used as i n pu t \"scriptSig\" : \"hex\" , (s tr i n g) The hex -e n coded sig nature scrip t \"sequence\" : n , ( nu meric) Scrip t seque n ce nu mber \"error\" : \"text\" (s tr i n g) Veri f ica t io n or sig n i n g error rela te d t o t he i n pu t } , ... ] }","title":"Result:"},{"location":"flightplans/avian-library/raw_transactions/signrawtransaction/#examples","text":"avian-cli signrawtransaction \"myhex\"","title":"Examples:"},{"location":"wAVN/what-is-wavn/","text":"What is Wrapped Avian (wAVN) Warning This document is planned to be re-written. Proceed with caution when dealing with wAVN. Going DeFi with your AVIN Wrapped Avian powers the Avian Network with the flexibility of an ERC20 token and EVM ecosytem Wrapped Avian (WAVN) is an ERC20 token on the Polygon Network, backed 1:1 with Avian. Completely transparent. Safe to use on EVM chains, Dapps, ledgers and many more. Why WAVN? WAVN brings liquidity to the defiEthereum ecosystems including decentralized exchanges (DEXs) and financial applications. WAVN further allows DAO's, Yeild Farms, Smart Staking & Lending and allows all further implimention of ERC-20 functionality with the backing of","title":"What is Wrapped Avian (wAVN)"},{"location":"wAVN/what-is-wavn/#what-is-wrapped-avian-wavn","text":"Warning This document is planned to be re-written. Proceed with caution when dealing with wAVN.","title":"What is Wrapped Avian (wAVN)"},{"location":"wAVN/what-is-wavn/#going-defi-with-your-avin","text":"Wrapped Avian powers the Avian Network with the flexibility of an ERC20 token and EVM ecosytem Wrapped Avian (WAVN) is an ERC20 token on the Polygon Network, backed 1:1 with Avian. Completely transparent. Safe to use on EVM chains, Dapps, ledgers and many more.","title":"Going DeFi with your AVIN"},{"location":"wAVN/what-is-wavn/#why-wavn","text":"WAVN brings liquidity to the defiEthereum ecosystems including decentralized exchanges (DEXs) and financial applications. WAVN further allows DAO's, Yeild Farms, Smart Staking & Lending and allows all further implimention of ERC-20 functionality with the backing of","title":"Why WAVN?"},{"location":"wAVN/how-to-wrap/1/","text":"Getting an EVM wallet EVM Wallet Available as a browser extension or as a mobile app, you can install or trust-wallet or any EVM Wallet with web3 functions. \u200b","title":"Getting an EVM wallet"},{"location":"wAVN/how-to-wrap/1/#getting-an-evm-wallet","text":"","title":"Getting an EVM wallet"},{"location":"wAVN/how-to-wrap/1/#evm-wallet","text":"Available as a browser extension or as a mobile app, you can install or trust-wallet or any EVM Wallet with web3 functions. \u200b","title":"EVM Wallet"},{"location":"wAVN/how-to-wrap/2/","text":"Connecting to Polygon Network Step 1. Open MetaMask Open your MetaMask browser extension by clicking the top right corner of your Browser. \u200b \u200b Step 2. Go to settings Click on the logo of your account at the top right of the MetaMask app. Then click on \u2018Settings\u2019. \u200b \u200b \u200b Step 3. Go to networks In the settings window you will see a list of different settings. Click on \u2018Network\u2019. In the following list, you will see all the networks that your MetaMask wallet can connect to. Next, click on the \u2018Add Network\u2019 button below. \u200b Step 4. Add the network details MetaMask will now ask you to enter a Network Name, New RPC URL, ChainID, Symbol and Block Explorer URL. To add the Polygon network to your MetaMask wallet, enter the following information: Network Name: Matic Mainnet New RPC URL: https://polygon-rpc.com/\u200b\u200b Chain ID: 137 Symbol: MATIC Block Explorer URL: https://polygonscan.com/ \u200b Step 5. Connect your MetaMask to the Polygon network The last step is to connect your MetaMask wallet to the network. To do this, click on the current network at the top of your MetaMask wallet. Then click on Matic Mainnet. \u200b","title":"Connecting to Polygon Network"},{"location":"wAVN/how-to-wrap/2/#connecting-to-polygon-network","text":"","title":"Connecting to Polygon Network"},{"location":"wAVN/how-to-wrap/2/#step-1-open-metamask","text":"Open your MetaMask browser extension by clicking the top right corner of your Browser. \u200b \u200b","title":"Step 1. Open MetaMask"},{"location":"wAVN/how-to-wrap/2/#step-2-go-to-settings","text":"Click on the logo of your account at the top right of the MetaMask app. Then click on \u2018Settings\u2019. \u200b \u200b \u200b","title":"Step 2. Go to settings"},{"location":"wAVN/how-to-wrap/2/#step-3-go-to-networks","text":"In the settings window you will see a list of different settings. Click on \u2018Network\u2019. In the following list, you will see all the networks that your MetaMask wallet can connect to. Next, click on the \u2018Add Network\u2019 button below. \u200b","title":"Step 3. Go to networks"},{"location":"wAVN/how-to-wrap/2/#step-4-add-the-network-details","text":"MetaMask will now ask you to enter a Network Name, New RPC URL, ChainID, Symbol and Block Explorer URL. To add the Polygon network to your MetaMask wallet, enter the following information: Network Name: Matic Mainnet New RPC URL: https://polygon-rpc.com/\u200b\u200b Chain ID: 137 Symbol: MATIC Block Explorer URL: https://polygonscan.com/ \u200b","title":"Step 4. Add the network details"},{"location":"wAVN/how-to-wrap/2/#step-5-connect-your-metamask-to-the-polygon-network","text":"The last step is to connect your MetaMask wallet to the network. To do this, click on the current network at the top of your MetaMask wallet. Then click on Matic Mainnet. \u200b","title":"Step 5. Connect your MetaMask to the Polygon network"},{"location":"wAVN/how-to-wrap/3/","text":"Adding WAVN to Metamask Step 1: Head over to the WAVN site Wrapped Avian Site \u2197 Step 2: Add to Metamask Button Click on Add to MetaMask button, opens MetaMask request to add token. \u200b","title":"Adding WAVN to Metamask"},{"location":"wAVN/how-to-wrap/3/#adding-wavn-to-metamask","text":"Step 1: Head over to the WAVN site Wrapped Avian Site \u2197 Step 2: Add to Metamask Button Click on Add to MetaMask button, opens MetaMask request to add token. \u200b","title":"Adding WAVN to Metamask"},{"location":"wAVN/how-to-wrap/4/","text":"Wrapping Request! Step 1: Head over to the WAVN site Wrapped Avian Site \u2197","title":"Wrapping Request!"},{"location":"wAVN/how-to-wrap/4/#wrapping-request","text":"Step 1: Head over to the WAVN site Wrapped Avian Site \u2197","title":"Wrapping Request!"}]}